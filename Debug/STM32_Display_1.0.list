
STM32_Display_1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a94c  08002aac  08002aac  00012aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3f8  0800d3f8  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  0800d3f8  0800d3f8  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d3f8  0800d3f8  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3f8  0800d3f8  0001d3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3fc  0800d3fc  0001d3fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  0800d400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000030  0800d430  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  0800d430  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000703a  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001448  00000000  00000000  00027093  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000710  00000000  00000000  000284e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000133f5  00000000  00000000  00028bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005bd5  00000000  00000000  0003bfe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00069573  00000000  00000000  00041bba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000ab12d  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000650  00000000  00000000  000ab1a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00001b48  00000000  00000000  000ab7f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a94 	.word	0x08002a94

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08002a94 	.word	0x08002a94

0800014c <demoTFT>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void demoTFT(void)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b08a      	sub	sp, #40	; 0x28
 8000150:	af04      	add	r7, sp, #16
	ST7735_SetRotation(r);
 8000152:	4b4a      	ldr	r3, [pc, #296]	; (800027c <demoTFT+0x130>)
 8000154:	781b      	ldrb	r3, [r3, #0]
 8000156:	4618      	mov	r0, r3
 8000158:	f001 f9b0 	bl	80014bc <ST7735_SetRotation>

	ST7735_FillScreen(ST7735_BLACK);
 800015c:	2000      	movs	r0, #0
 800015e:	f000 fdb5 	bl	8000ccc <ST7735_FillScreen>

	for(int x = 0; x < ST7735_GetWidth(); x++)
 8000162:	2300      	movs	r3, #0
 8000164:	617b      	str	r3, [r7, #20]
 8000166:	e018      	b.n	800019a <demoTFT+0x4e>
	{
	  ST7735_DrawPixel(x, 0, ST7735_WHITE);
 8000168:	697b      	ldr	r3, [r7, #20]
 800016a:	b29b      	uxth	r3, r3
 800016c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000170:	2100      	movs	r1, #0
 8000172:	4618      	mov	r0, r3
 8000174:	f000 fc7e 	bl	8000a74 <ST7735_DrawPixel>
	  ST7735_DrawPixel(x, ST7735_GetHeight() - 1, ST7735_WHITE);
 8000178:	697b      	ldr	r3, [r7, #20]
 800017a:	b29c      	uxth	r4, r3
 800017c:	f001 fa46 	bl	800160c <ST7735_GetHeight>
 8000180:	4603      	mov	r3, r0
 8000182:	b29b      	uxth	r3, r3
 8000184:	3b01      	subs	r3, #1
 8000186:	b29b      	uxth	r3, r3
 8000188:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800018c:	4619      	mov	r1, r3
 800018e:	4620      	mov	r0, r4
 8000190:	f000 fc70 	bl	8000a74 <ST7735_DrawPixel>
	for(int x = 0; x < ST7735_GetWidth(); x++)
 8000194:	697b      	ldr	r3, [r7, #20]
 8000196:	3301      	adds	r3, #1
 8000198:	617b      	str	r3, [r7, #20]
 800019a:	f001 fa43 	bl	8001624 <ST7735_GetWidth>
 800019e:	4603      	mov	r3, r0
 80001a0:	461a      	mov	r2, r3
 80001a2:	697b      	ldr	r3, [r7, #20]
 80001a4:	4293      	cmp	r3, r2
 80001a6:	dbdf      	blt.n	8000168 <demoTFT+0x1c>
	}

	for(int y = 0; y < ST7735_GetHeight(); y++)
 80001a8:	2300      	movs	r3, #0
 80001aa:	613b      	str	r3, [r7, #16]
 80001ac:	e017      	b.n	80001de <demoTFT+0x92>
	{
	  ST7735_DrawPixel(0, y, ST7735_WHITE);
 80001ae:	693b      	ldr	r3, [r7, #16]
 80001b0:	b29b      	uxth	r3, r3
 80001b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001b6:	4619      	mov	r1, r3
 80001b8:	2000      	movs	r0, #0
 80001ba:	f000 fc5b 	bl	8000a74 <ST7735_DrawPixel>
	  ST7735_DrawPixel(ST7735_GetWidth() - 1, y, ST7735_WHITE);
 80001be:	f001 fa31 	bl	8001624 <ST7735_GetWidth>
 80001c2:	4603      	mov	r3, r0
 80001c4:	b29b      	uxth	r3, r3
 80001c6:	3b01      	subs	r3, #1
 80001c8:	b29b      	uxth	r3, r3
 80001ca:	693a      	ldr	r2, [r7, #16]
 80001cc:	b291      	uxth	r1, r2
 80001ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001d2:	4618      	mov	r0, r3
 80001d4:	f000 fc4e 	bl	8000a74 <ST7735_DrawPixel>
	for(int y = 0; y < ST7735_GetHeight(); y++)
 80001d8:	693b      	ldr	r3, [r7, #16]
 80001da:	3301      	adds	r3, #1
 80001dc:	613b      	str	r3, [r7, #16]
 80001de:	f001 fa15 	bl	800160c <ST7735_GetHeight>
 80001e2:	4603      	mov	r3, r0
 80001e4:	461a      	mov	r2, r3
 80001e6:	693b      	ldr	r3, [r7, #16]
 80001e8:	4293      	cmp	r3, r2
 80001ea:	dbe0      	blt.n	80001ae <demoTFT+0x62>
	}

	ST7735_DrawLine(0, 0, ST7735_GetWidth(), ST7735_GetHeight(), ST7735_WHITE);
 80001ec:	f001 fa1a 	bl	8001624 <ST7735_GetWidth>
 80001f0:	4603      	mov	r3, r0
 80001f2:	461c      	mov	r4, r3
 80001f4:	f001 fa0a 	bl	800160c <ST7735_GetHeight>
 80001f8:	4603      	mov	r3, r0
 80001fa:	461a      	mov	r2, r3
 80001fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	4613      	mov	r3, r2
 8000204:	4622      	mov	r2, r4
 8000206:	2100      	movs	r1, #0
 8000208:	2000      	movs	r0, #0
 800020a:	f001 f821 	bl	8001250 <ST7735_DrawLine>
	ST7735_DrawLine(ST7735_GetWidth(), 0, 0, ST7735_GetHeight(), ST7735_WHITE);
 800020e:	f001 fa09 	bl	8001624 <ST7735_GetWidth>
 8000212:	4603      	mov	r3, r0
 8000214:	461c      	mov	r4, r3
 8000216:	f001 f9f9 	bl	800160c <ST7735_GetHeight>
 800021a:	4603      	mov	r3, r0
 800021c:	461a      	mov	r2, r3
 800021e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000222:	9300      	str	r3, [sp, #0]
 8000224:	4613      	mov	r3, r2
 8000226:	2200      	movs	r2, #0
 8000228:	2100      	movs	r1, #0
 800022a:	4620      	mov	r0, r4
 800022c:	f001 f810 	bl	8001250 <ST7735_DrawLine>

	HAL_Delay(2000);
 8000230:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000234:	f001 fb58 	bl	80018e8 <HAL_Delay>

	ST7735_FillScreen(ST7735_BLACK);
 8000238:	2000      	movs	r0, #0
 800023a:	f000 fd47 	bl	8000ccc <ST7735_FillScreen>

	for (int i = 0; i < ST7735_GetHeight(); i += 4)
 800023e:	2300      	movs	r3, #0
 8000240:	60fb      	str	r3, [r7, #12]
 8000242:	e011      	b.n	8000268 <demoTFT+0x11c>
	{
		ST7735_DrawFastHLine(0, i, ST7735_GetWidth() - 1, ST7735_WHITE);
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	b21c      	sxth	r4, r3
 8000248:	f001 f9ec 	bl	8001624 <ST7735_GetWidth>
 800024c:	4603      	mov	r3, r0
 800024e:	b29b      	uxth	r3, r3
 8000250:	3b01      	subs	r3, #1
 8000252:	b29b      	uxth	r3, r3
 8000254:	b21a      	sxth	r2, r3
 8000256:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800025a:	4621      	mov	r1, r4
 800025c:	2000      	movs	r0, #0
 800025e:	f001 f8e1 	bl	8001424 <ST7735_DrawFastHLine>
	for (int i = 0; i < ST7735_GetHeight(); i += 4)
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	3304      	adds	r3, #4
 8000266:	60fb      	str	r3, [r7, #12]
 8000268:	f001 f9d0 	bl	800160c <ST7735_GetHeight>
 800026c:	4603      	mov	r3, r0
 800026e:	461a      	mov	r2, r3
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	4293      	cmp	r3, r2
 8000274:	dbe6      	blt.n	8000244 <demoTFT+0xf8>
	}

	for (int i = 0; i < ST7735_GetWidth(); i += 4)
 8000276:	2300      	movs	r3, #0
 8000278:	60bb      	str	r3, [r7, #8]
 800027a:	e013      	b.n	80002a4 <demoTFT+0x158>
 800027c:	2000004c 	.word	0x2000004c
	{
		ST7735_DrawFastVLine(i, 0, ST7735_GetHeight() - 1, ST7735_WHITE);
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	b21c      	sxth	r4, r3
 8000284:	f001 f9c2 	bl	800160c <ST7735_GetHeight>
 8000288:	4603      	mov	r3, r0
 800028a:	b29b      	uxth	r3, r3
 800028c:	3b01      	subs	r3, #1
 800028e:	b29b      	uxth	r3, r3
 8000290:	b21a      	sxth	r2, r3
 8000292:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000296:	2100      	movs	r1, #0
 8000298:	4620      	mov	r0, r4
 800029a:	f001 f877 	bl	800138c <ST7735_DrawFastVLine>
	for (int i = 0; i < ST7735_GetWidth(); i += 4)
 800029e:	68bb      	ldr	r3, [r7, #8]
 80002a0:	3304      	adds	r3, #4
 80002a2:	60bb      	str	r3, [r7, #8]
 80002a4:	f001 f9be 	bl	8001624 <ST7735_GetWidth>
 80002a8:	4603      	mov	r3, r0
 80002aa:	461a      	mov	r2, r3
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	4293      	cmp	r3, r2
 80002b0:	dbe6      	blt.n	8000280 <demoTFT+0x134>
	}

	HAL_Delay(2000);
 80002b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002b6:	f001 fb17 	bl	80018e8 <HAL_Delay>

	// Check fonts
	ST7735_FillScreen(ST7735_BLACK);
 80002ba:	2000      	movs	r0, #0
 80002bc:	f000 fd06 	bl	8000ccc <ST7735_FillScreen>
	ST7735_DrawString(0, 0, "Font_7x10, red on black, lorem ipsum dolor sit amet", Font_7x10, ST7735_RED, ST7735_BLACK);
 80002c0:	4ba0      	ldr	r3, [pc, #640]	; (8000544 <demoTFT+0x3f8>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	9202      	str	r2, [sp, #8]
 80002c6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80002ca:	9201      	str	r2, [sp, #4]
 80002cc:	685a      	ldr	r2, [r3, #4]
 80002ce:	9200      	str	r2, [sp, #0]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a9d      	ldr	r2, [pc, #628]	; (8000548 <demoTFT+0x3fc>)
 80002d4:	2100      	movs	r1, #0
 80002d6:	2000      	movs	r0, #0
 80002d8:	f000 fc10 	bl	8000afc <ST7735_DrawString>
	ST7735_DrawString(0, 3*10, "Font_11x18, green, lorem ipsum", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 80002dc:	4b9b      	ldr	r3, [pc, #620]	; (800054c <demoTFT+0x400>)
 80002de:	2200      	movs	r2, #0
 80002e0:	9202      	str	r2, [sp, #8]
 80002e2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80002e6:	9201      	str	r2, [sp, #4]
 80002e8:	685a      	ldr	r2, [r3, #4]
 80002ea:	9200      	str	r2, [sp, #0]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a98      	ldr	r2, [pc, #608]	; (8000550 <demoTFT+0x404>)
 80002f0:	211e      	movs	r1, #30
 80002f2:	2000      	movs	r0, #0
 80002f4:	f000 fc02 	bl	8000afc <ST7735_DrawString>
	ST7735_DrawString(0, 3*10+3*18, "Font_16x26", Font_16x26, ST7735_BLUE, ST7735_BLACK);
 80002f8:	4b96      	ldr	r3, [pc, #600]	; (8000554 <demoTFT+0x408>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	9202      	str	r2, [sp, #8]
 80002fe:	221f      	movs	r2, #31
 8000300:	9201      	str	r2, [sp, #4]
 8000302:	685a      	ldr	r2, [r3, #4]
 8000304:	9200      	str	r2, [sp, #0]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a93      	ldr	r2, [pc, #588]	; (8000558 <demoTFT+0x40c>)
 800030a:	2154      	movs	r1, #84	; 0x54
 800030c:	2000      	movs	r0, #0
 800030e:	f000 fbf5 	bl	8000afc <ST7735_DrawString>
	HAL_Delay(2000);
 8000312:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000316:	f001 fae7 	bl	80018e8 <HAL_Delay>

	// Check colors
	ST7735_FillScreen(ST7735_BLACK);
 800031a:	2000      	movs	r0, #0
 800031c:	f000 fcd6 	bl	8000ccc <ST7735_FillScreen>
	ST7735_DrawString(0, 0, "BLACK", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8000320:	4b8a      	ldr	r3, [pc, #552]	; (800054c <demoTFT+0x400>)
 8000322:	2200      	movs	r2, #0
 8000324:	9202      	str	r2, [sp, #8]
 8000326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800032a:	9201      	str	r2, [sp, #4]
 800032c:	685a      	ldr	r2, [r3, #4]
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a8a      	ldr	r2, [pc, #552]	; (800055c <demoTFT+0x410>)
 8000334:	2100      	movs	r1, #0
 8000336:	2000      	movs	r0, #0
 8000338:	f000 fbe0 	bl	8000afc <ST7735_DrawString>
	HAL_Delay(500);
 800033c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000340:	f001 fad2 	bl	80018e8 <HAL_Delay>

	ST7735_FillScreen(ST7735_BLUE);
 8000344:	201f      	movs	r0, #31
 8000346:	f000 fcc1 	bl	8000ccc <ST7735_FillScreen>
	ST7735_DrawString(0, 0, "BLUE", Font_11x18, ST7735_BLACK, ST7735_BLUE);
 800034a:	4b80      	ldr	r3, [pc, #512]	; (800054c <demoTFT+0x400>)
 800034c:	221f      	movs	r2, #31
 800034e:	9202      	str	r2, [sp, #8]
 8000350:	2200      	movs	r2, #0
 8000352:	9201      	str	r2, [sp, #4]
 8000354:	685a      	ldr	r2, [r3, #4]
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a81      	ldr	r2, [pc, #516]	; (8000560 <demoTFT+0x414>)
 800035c:	2100      	movs	r1, #0
 800035e:	2000      	movs	r0, #0
 8000360:	f000 fbcc 	bl	8000afc <ST7735_DrawString>
	HAL_Delay(500);
 8000364:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000368:	f001 fabe 	bl	80018e8 <HAL_Delay>

	ST7735_FillScreen(ST7735_RED);
 800036c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000370:	f000 fcac 	bl	8000ccc <ST7735_FillScreen>
	ST7735_DrawString(0, 0, "RED", Font_11x18, ST7735_BLACK, ST7735_RED);
 8000374:	4b75      	ldr	r3, [pc, #468]	; (800054c <demoTFT+0x400>)
 8000376:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800037a:	9202      	str	r2, [sp, #8]
 800037c:	2200      	movs	r2, #0
 800037e:	9201      	str	r2, [sp, #4]
 8000380:	685a      	ldr	r2, [r3, #4]
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a77      	ldr	r2, [pc, #476]	; (8000564 <demoTFT+0x418>)
 8000388:	2100      	movs	r1, #0
 800038a:	2000      	movs	r0, #0
 800038c:	f000 fbb6 	bl	8000afc <ST7735_DrawString>
	HAL_Delay(500);
 8000390:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000394:	f001 faa8 	bl	80018e8 <HAL_Delay>

	ST7735_FillScreen(ST7735_GREEN);
 8000398:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800039c:	f000 fc96 	bl	8000ccc <ST7735_FillScreen>
	ST7735_DrawString(0, 0, "GREEN", Font_11x18, ST7735_BLACK, ST7735_GREEN);
 80003a0:	4b6a      	ldr	r3, [pc, #424]	; (800054c <demoTFT+0x400>)
 80003a2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80003a6:	9202      	str	r2, [sp, #8]
 80003a8:	2200      	movs	r2, #0
 80003aa:	9201      	str	r2, [sp, #4]
 80003ac:	685a      	ldr	r2, [r3, #4]
 80003ae:	9200      	str	r2, [sp, #0]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4a6d      	ldr	r2, [pc, #436]	; (8000568 <demoTFT+0x41c>)
 80003b4:	2100      	movs	r1, #0
 80003b6:	2000      	movs	r0, #0
 80003b8:	f000 fba0 	bl	8000afc <ST7735_DrawString>
	HAL_Delay(500);
 80003bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003c0:	f001 fa92 	bl	80018e8 <HAL_Delay>

	ST7735_FillScreen(ST7735_CYAN);
 80003c4:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80003c8:	f000 fc80 	bl	8000ccc <ST7735_FillScreen>
	ST7735_DrawString(0, 0, "CYAN", Font_11x18, ST7735_BLACK, ST7735_CYAN);
 80003cc:	4b5f      	ldr	r3, [pc, #380]	; (800054c <demoTFT+0x400>)
 80003ce:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80003d2:	9202      	str	r2, [sp, #8]
 80003d4:	2200      	movs	r2, #0
 80003d6:	9201      	str	r2, [sp, #4]
 80003d8:	685a      	ldr	r2, [r3, #4]
 80003da:	9200      	str	r2, [sp, #0]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a63      	ldr	r2, [pc, #396]	; (800056c <demoTFT+0x420>)
 80003e0:	2100      	movs	r1, #0
 80003e2:	2000      	movs	r0, #0
 80003e4:	f000 fb8a 	bl	8000afc <ST7735_DrawString>
	HAL_Delay(500);
 80003e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ec:	f001 fa7c 	bl	80018e8 <HAL_Delay>

	ST7735_FillScreen(ST7735_MAGENTA);
 80003f0:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80003f4:	f000 fc6a 	bl	8000ccc <ST7735_FillScreen>
	ST7735_DrawString(0, 0, "MAGENTA", Font_11x18, ST7735_BLACK, ST7735_MAGENTA);
 80003f8:	4b54      	ldr	r3, [pc, #336]	; (800054c <demoTFT+0x400>)
 80003fa:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80003fe:	9202      	str	r2, [sp, #8]
 8000400:	2200      	movs	r2, #0
 8000402:	9201      	str	r2, [sp, #4]
 8000404:	685a      	ldr	r2, [r3, #4]
 8000406:	9200      	str	r2, [sp, #0]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a59      	ldr	r2, [pc, #356]	; (8000570 <demoTFT+0x424>)
 800040c:	2100      	movs	r1, #0
 800040e:	2000      	movs	r0, #0
 8000410:	f000 fb74 	bl	8000afc <ST7735_DrawString>
	HAL_Delay(500);
 8000414:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000418:	f001 fa66 	bl	80018e8 <HAL_Delay>

	ST7735_FillScreen(ST7735_YELLOW);
 800041c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8000420:	f000 fc54 	bl	8000ccc <ST7735_FillScreen>
	ST7735_DrawString(0, 0, "YELLOW", Font_11x18, ST7735_BLACK, ST7735_YELLOW);
 8000424:	4b49      	ldr	r3, [pc, #292]	; (800054c <demoTFT+0x400>)
 8000426:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800042a:	9202      	str	r2, [sp, #8]
 800042c:	2200      	movs	r2, #0
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	685a      	ldr	r2, [r3, #4]
 8000432:	9200      	str	r2, [sp, #0]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a4f      	ldr	r2, [pc, #316]	; (8000574 <demoTFT+0x428>)
 8000438:	2100      	movs	r1, #0
 800043a:	2000      	movs	r0, #0
 800043c:	f000 fb5e 	bl	8000afc <ST7735_DrawString>
	HAL_Delay(500);
 8000440:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000444:	f001 fa50 	bl	80018e8 <HAL_Delay>

	ST7735_FillScreen(ST7735_WHITE);
 8000448:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800044c:	f000 fc3e 	bl	8000ccc <ST7735_FillScreen>
	ST7735_DrawString(0, 0, "WHITE", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8000450:	4b3e      	ldr	r3, [pc, #248]	; (800054c <demoTFT+0x400>)
 8000452:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000456:	9202      	str	r2, [sp, #8]
 8000458:	2200      	movs	r2, #0
 800045a:	9201      	str	r2, [sp, #4]
 800045c:	685a      	ldr	r2, [r3, #4]
 800045e:	9200      	str	r2, [sp, #0]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a45      	ldr	r2, [pc, #276]	; (8000578 <demoTFT+0x42c>)
 8000464:	2100      	movs	r1, #0
 8000466:	2000      	movs	r0, #0
 8000468:	f000 fb48 	bl	8000afc <ST7735_DrawString>
	HAL_Delay(500);
 800046c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000470:	f001 fa3a 	bl	80018e8 <HAL_Delay>

	// Draw circles
	ST7735_FillScreen(ST7735_BLACK);
 8000474:	2000      	movs	r0, #0
 8000476:	f000 fc29 	bl	8000ccc <ST7735_FillScreen>
	for (int i = 0; i < ST7735_GetHeight() / 2; i += 2)
 800047a:	2300      	movs	r3, #0
 800047c:	607b      	str	r3, [r7, #4]
 800047e:	e017      	b.n	80004b0 <demoTFT+0x364>
	{
		ST7735_DrawCircle(ST7735_GetWidth() / 2, ST7735_GetHeight() / 2, i, ST7735_YELLOW);
 8000480:	f001 f8d0 	bl	8001624 <ST7735_GetWidth>
 8000484:	4603      	mov	r3, r0
 8000486:	0fda      	lsrs	r2, r3, #31
 8000488:	4413      	add	r3, r2
 800048a:	105b      	asrs	r3, r3, #1
 800048c:	b21c      	sxth	r4, r3
 800048e:	f001 f8bd 	bl	800160c <ST7735_GetHeight>
 8000492:	4603      	mov	r3, r0
 8000494:	0fda      	lsrs	r2, r3, #31
 8000496:	4413      	add	r3, r2
 8000498:	105b      	asrs	r3, r3, #1
 800049a:	b219      	sxth	r1, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	b21a      	sxth	r2, r3
 80004a0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80004a4:	4620      	mov	r0, r4
 80004a6:	f000 fc9d 	bl	8000de4 <ST7735_DrawCircle>
	for (int i = 0; i < ST7735_GetHeight() / 2; i += 2)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	3302      	adds	r3, #2
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	f001 f8ac 	bl	800160c <ST7735_GetHeight>
 80004b4:	4603      	mov	r3, r0
 80004b6:	0fda      	lsrs	r2, r3, #31
 80004b8:	4413      	add	r3, r2
 80004ba:	105b      	asrs	r3, r3, #1
 80004bc:	b21b      	sxth	r3, r3
 80004be:	461a      	mov	r2, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4293      	cmp	r3, r2
 80004c4:	dbdc      	blt.n	8000480 <demoTFT+0x334>
	}
	HAL_Delay(1000);
 80004c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ca:	f001 fa0d 	bl	80018e8 <HAL_Delay>

	ST7735_FillScreen(ST7735_BLACK);
 80004ce:	2000      	movs	r0, #0
 80004d0:	f000 fbfc 	bl	8000ccc <ST7735_FillScreen>
	ST7735_FillTriangle(0, 0, ST7735_GetWidth() / 2, ST7735_GetHeight(), ST7735_GetWidth(), 0, ST7735_RED);
 80004d4:	f001 f8a6 	bl	8001624 <ST7735_GetWidth>
 80004d8:	4603      	mov	r3, r0
 80004da:	0fda      	lsrs	r2, r3, #31
 80004dc:	4413      	add	r3, r2
 80004de:	105b      	asrs	r3, r3, #1
 80004e0:	b21c      	sxth	r4, r3
 80004e2:	f001 f893 	bl	800160c <ST7735_GetHeight>
 80004e6:	4603      	mov	r3, r0
 80004e8:	461d      	mov	r5, r3
 80004ea:	f001 f89b 	bl	8001624 <ST7735_GetWidth>
 80004ee:	4603      	mov	r3, r0
 80004f0:	461a      	mov	r2, r3
 80004f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80004f6:	9302      	str	r3, [sp, #8]
 80004f8:	2300      	movs	r3, #0
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	9200      	str	r2, [sp, #0]
 80004fe:	462b      	mov	r3, r5
 8000500:	4622      	mov	r2, r4
 8000502:	2100      	movs	r1, #0
 8000504:	2000      	movs	r0, #0
 8000506:	f000 fd3e 	bl	8000f86 <ST7735_FillTriangle>
	HAL_Delay(1000);
 800050a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800050e:	f001 f9eb 	bl	80018e8 <HAL_Delay>

	ST7735_FillScreen(ST7735_BLACK);
 8000512:	2000      	movs	r0, #0
 8000514:	f000 fbda 	bl	8000ccc <ST7735_FillScreen>
	ST7735_DrawImage(0, 0, 128, 128, (uint16_t*) test_img_128x128);
 8000518:	4b18      	ldr	r3, [pc, #96]	; (800057c <demoTFT+0x430>)
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	2280      	movs	r2, #128	; 0x80
 8000520:	2100      	movs	r1, #0
 8000522:	2000      	movs	r0, #0
 8000524:	f000 fbee 	bl	8000d04 <ST7735_DrawImage>
	HAL_Delay(3000);
 8000528:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800052c:	f001 f9dc 	bl	80018e8 <HAL_Delay>

	r++;
 8000530:	4b13      	ldr	r3, [pc, #76]	; (8000580 <demoTFT+0x434>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	3301      	adds	r3, #1
 8000536:	b2da      	uxtb	r2, r3
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <demoTFT+0x434>)
 800053a:	701a      	strb	r2, [r3, #0]
}
 800053c:	bf00      	nop
 800053e:	3718      	adds	r7, #24
 8000540:	46bd      	mov	sp, r7
 8000542:	bdb0      	pop	{r4, r5, r7, pc}
 8000544:	20000000 	.word	0x20000000
 8000548:	08002aac 	.word	0x08002aac
 800054c:	20000008 	.word	0x20000008
 8000550:	08002ae0 	.word	0x08002ae0
 8000554:	20000010 	.word	0x20000010
 8000558:	08002b00 	.word	0x08002b00
 800055c:	08002b0c 	.word	0x08002b0c
 8000560:	08002b14 	.word	0x08002b14
 8000564:	08002b1c 	.word	0x08002b1c
 8000568:	08002b20 	.word	0x08002b20
 800056c:	08002b28 	.word	0x08002b28
 8000570:	08002b30 	.word	0x08002b30
 8000574:	08002b38 	.word	0x08002b38
 8000578:	08002b40 	.word	0x08002b40
 800057c:	08005370 	.word	0x08005370
 8000580:	2000004c 	.word	0x2000004c

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f001 f94c 	bl	8001824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f80f 	bl	80005ae <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f8ac 	bl	80006ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000594:	f000 f88c 	bl	80006b0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000598:	f000 f84e 	bl	8000638 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800059c:	f000 f882 	bl	80006a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 80005a0:	f000 fa46 	bl	8000a30 <ST7735_Init>
  ST7735_Backlight_On();
 80005a4:	f000 fc12 	bl	8000dcc <ST7735_Backlight_On>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  demoTFT();
 80005a8:	f7ff fdd0 	bl	800014c <demoTFT>
 80005ac:	e7fc      	b.n	80005a8 <main+0x24>

080005ae <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b090      	sub	sp, #64	; 0x40
 80005b2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b4:	f107 0318 	add.w	r3, r7, #24
 80005b8:	2228      	movs	r2, #40	; 0x28
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 fa61 	bl	8002a84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d0:	2301      	movs	r3, #1
 80005d2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005de:	2301      	movs	r3, #1
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 0318 	add.w	r3, r7, #24
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fc18 	bl	8001e2c <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000602:	f000 f8bf 	bl	8000784 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2302      	movs	r3, #2
 800060c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2102      	movs	r1, #2
 8000620:	4618      	mov	r0, r3
 8000622:	f001 fe83 	bl	800232c <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800062c:	f000 f8aa 	bl	8000784 <Error_Handler>
  }
}
 8000630:	bf00      	nop
 8000632:	3740      	adds	r7, #64	; 0x40
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <MX_SPI1_Init+0x64>)
 800063e:	4a18      	ldr	r2, [pc, #96]	; (80006a0 <MX_SPI1_Init+0x68>)
 8000640:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_SPI1_Init+0x64>)
 8000644:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000648:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800064a:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_SPI1_Init+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_SPI1_Init+0x64>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_SPI1_Init+0x64>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_SPI1_Init+0x64>)
 800065e:	2200      	movs	r2, #0
 8000660:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_SPI1_Init+0x64>)
 8000664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000668:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_SPI1_Init+0x64>)
 800066c:	2208      	movs	r2, #8
 800066e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000670:	4b0a      	ldr	r3, [pc, #40]	; (800069c <MX_SPI1_Init+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_SPI1_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <MX_SPI1_Init+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_SPI1_Init+0x64>)
 8000684:	220a      	movs	r2, #10
 8000686:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_SPI1_Init+0x64>)
 800068a:	f001 ffb9 	bl	8002600 <HAL_SPI_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000694:	f000 f876 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000050 	.word	0x20000050
 80006a0:	40013000 	.word	0x40013000

080006a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_DMA_Init+0x38>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <MX_DMA_Init+0x38>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6153      	str	r3, [r2, #20]
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_DMA_Init+0x38>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	200d      	movs	r0, #13
 80006d4:	f001 fa01 	bl	8001ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80006d8:	200d      	movs	r0, #13
 80006da:	f001 fa1a 	bl	8001b12 <HAL_NVIC_EnableIRQ>

}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40021000 	.word	0x40021000

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 0310 	add.w	r3, r7, #16
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_GPIO_Init+0x90>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a1d      	ldr	r2, [pc, #116]	; (800077c <MX_GPIO_Init+0x90>)
 8000706:	f043 0320 	orr.w	r3, r3, #32
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_GPIO_Init+0x90>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0320 	and.w	r3, r3, #32
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_GPIO_Init+0x90>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a17      	ldr	r2, [pc, #92]	; (800077c <MX_GPIO_Init+0x90>)
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_GPIO_Init+0x90>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0304 	and.w	r3, r3, #4
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_GPIO_Init+0x90>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a11      	ldr	r2, [pc, #68]	; (800077c <MX_GPIO_Init+0x90>)
 8000736:	f043 0308 	orr.w	r3, r3, #8
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_GPIO_Init+0x90>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f003 0308 	and.w	r3, r3, #8
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800074e:	480c      	ldr	r0, [pc, #48]	; (8000780 <MX_GPIO_Init+0x94>)
 8000750:	f001 fb54 	bl	8001dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST7735_RES_Pin ST7735_DC_Pin ST7735_CS_Pin ST7735_BL_Pin */
  GPIO_InitStruct.Pin = ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin;
 8000754:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000758:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2302      	movs	r3, #2
 8000764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000766:	f107 0310 	add.w	r3, r7, #16
 800076a:	4619      	mov	r1, r3
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_GPIO_Init+0x94>)
 800076e:	f001 f9eb 	bl	8001b48 <HAL_GPIO_Init>

}
 8000772:	bf00      	nop
 8000774:	3720      	adds	r7, #32
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40021000 	.word	0x40021000
 8000780:	40010c00 	.word	0x40010c00

08000784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <ST7735_GPIO_Init>:
static void ST7735_ExecuteCommandList(const uint8_t *addr);
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1);
static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor);

static void ST7735_GPIO_Init(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.Pin = ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin;
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <ST7735_Reset>:

static void ST7735_Reset()
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	TFT_RES_L();
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <ST7735_Reset+0x20>)
 80007a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007a6:	615a      	str	r2, [r3, #20]
	HAL_Delay(20);
 80007a8:	2014      	movs	r0, #20
 80007aa:	f001 f89d 	bl	80018e8 <HAL_Delay>
	TFT_RES_H();
 80007ae:	4b03      	ldr	r3, [pc, #12]	; (80007bc <ST7735_Reset+0x20>)
 80007b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007b4:	611a      	str	r2, [r3, #16]
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40010c00 	.word	0x40010c00

080007c0 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
	TFT_DC_C();
 80007ca:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <ST7735_WriteCommand+0x28>)
 80007cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007d0:	615a      	str	r2, [r3, #20]
#ifdef USE_SPI_DMA
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
	//while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80007d2:	1df9      	adds	r1, r7, #7
 80007d4:	f04f 33ff 	mov.w	r3, #4294967295
 80007d8:	2201      	movs	r2, #1
 80007da:	4804      	ldr	r0, [pc, #16]	; (80007ec <ST7735_WriteCommand+0x2c>)
 80007dc:	f001 ff71 	bl	80026c2 <HAL_SPI_Transmit>
#endif
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40010c00 	.word	0x40010c00
 80007ec:	20000050 	.word	0x20000050

080007f0 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
	TFT_DC_D();
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <ST7735_WriteData+0x2c>)
 80007fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000800:	611a      	str	r2, [r3, #16]
#ifdef USE_SPI_DMA
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
	while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	b29a      	uxth	r2, r3
 8000806:	f04f 33ff 	mov.w	r3, #4294967295
 800080a:	6879      	ldr	r1, [r7, #4]
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <ST7735_WriteData+0x30>)
 800080e:	f001 ff58 	bl	80026c2 <HAL_SPI_Transmit>
#endif
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40010c00 	.word	0x40010c00
 8000820:	20000050 	.word	0x20000050

08000824 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	1c5a      	adds	r2, r3, #1
 8000830:	607a      	str	r2, [r7, #4]
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	73fb      	strb	r3, [r7, #15]
    while(numCommands--)
 8000836:	e034      	b.n	80008a2 <ST7735_ExecuteCommandList+0x7e>
    {
    	uint8_t cmd = *addr++;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	1c5a      	adds	r2, r3, #1
 800083c:	607a      	str	r2, [r7, #4]
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000842:	7afb      	ldrb	r3, [r7, #11]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ffbb 	bl	80007c0 <ST7735_WriteCommand>

        numArgs = *addr++;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	1c5a      	adds	r2, r3, #1
 800084e:	607a      	str	r2, [r7, #4]
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000854:	7abb      	ldrb	r3, [r7, #10]
 8000856:	b29b      	uxth	r3, r3
 8000858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800085e:	7abb      	ldrb	r3, [r7, #10]
 8000860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000864:	72bb      	strb	r3, [r7, #10]
        if(numArgs)
 8000866:	7abb      	ldrb	r3, [r7, #10]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d008      	beq.n	800087e <ST7735_ExecuteCommandList+0x5a>
        {
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800086c:	7abb      	ldrb	r3, [r7, #10]
 800086e:	4619      	mov	r1, r3
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff ffbd 	bl	80007f0 <ST7735_WriteData>
            addr += numArgs;
 8000876:	7abb      	ldrb	r3, [r7, #10]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	4413      	add	r3, r2
 800087c:	607b      	str	r3, [r7, #4]
        }

        if(ms)
 800087e:	89bb      	ldrh	r3, [r7, #12]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d00e      	beq.n	80008a2 <ST7735_ExecuteCommandList+0x7e>
        {
            ms = *addr++;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	1c5a      	adds	r2, r3, #1
 8000888:	607a      	str	r2, [r7, #4]
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800088e:	89bb      	ldrh	r3, [r7, #12]
 8000890:	2bff      	cmp	r3, #255	; 0xff
 8000892:	d102      	bne.n	800089a <ST7735_ExecuteCommandList+0x76>
 8000894:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000898:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800089a:	89bb      	ldrh	r3, [r7, #12]
 800089c:	4618      	mov	r0, r3
 800089e:	f001 f823 	bl	80018e8 <HAL_Delay>
    while(numCommands--)
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	1e5a      	subs	r2, r3, #1
 80008a6:	73fa      	strb	r2, [r7, #15]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d1c5      	bne.n	8000838 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80008b4:	b590      	push	{r4, r7, lr}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4604      	mov	r4, r0
 80008bc:	4608      	mov	r0, r1
 80008be:	4611      	mov	r1, r2
 80008c0:	461a      	mov	r2, r3
 80008c2:	4623      	mov	r3, r4
 80008c4:	71fb      	strb	r3, [r7, #7]
 80008c6:	4603      	mov	r3, r0
 80008c8:	71bb      	strb	r3, [r7, #6]
 80008ca:	460b      	mov	r3, r1
 80008cc:	717b      	strb	r3, [r7, #5]
 80008ce:	4613      	mov	r3, r2
 80008d0:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80008d2:	202a      	movs	r0, #42	; 0x2a
 80008d4:	f7ff ff74 	bl	80007c0 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80008d8:	2300      	movs	r3, #0
 80008da:	733b      	strb	r3, [r7, #12]
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <ST7735_SetAddressWindow+0x88>)
 80008de:	781a      	ldrb	r2, [r3, #0]
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	4413      	add	r3, r2
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	737b      	strb	r3, [r7, #13]
 80008e8:	2300      	movs	r3, #0
 80008ea:	73bb      	strb	r3, [r7, #14]
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <ST7735_SetAddressWindow+0x88>)
 80008ee:	781a      	ldrb	r2, [r3, #0]
 80008f0:	797b      	ldrb	r3, [r7, #5]
 80008f2:	4413      	add	r3, r2
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	2104      	movs	r1, #4
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ff76 	bl	80007f0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000904:	202b      	movs	r0, #43	; 0x2b
 8000906:	f7ff ff5b 	bl	80007c0 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <ST7735_SetAddressWindow+0x8c>)
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	79bb      	ldrb	r3, [r7, #6]
 8000910:	4413      	add	r3, r2
 8000912:	b2db      	uxtb	r3, r3
 8000914:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <ST7735_SetAddressWindow+0x8c>)
 8000918:	781a      	ldrb	r2, [r3, #0]
 800091a:	793b      	ldrb	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	b2db      	uxtb	r3, r3
 8000920:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	2104      	movs	r1, #4
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff61 	bl	80007f0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800092e:	202c      	movs	r0, #44	; 0x2c
 8000930:	f7ff ff46 	bl	80007c0 <ST7735_WriteCommand>
}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	bd90      	pop	{r4, r7, pc}
 800093c:	20000020 	.word	0x20000020
 8000940:	20000021 	.word	0x20000021

08000944 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000944:	b082      	sub	sp, #8
 8000946:	b590      	push	{r4, r7, lr}
 8000948:	b089      	sub	sp, #36	; 0x24
 800094a:	af00      	add	r7, sp, #0
 800094c:	637b      	str	r3, [r7, #52]	; 0x34
 800094e:	4603      	mov	r3, r0
 8000950:	80fb      	strh	r3, [r7, #6]
 8000952:	460b      	mov	r3, r1
 8000954:	80bb      	strh	r3, [r7, #4]
 8000956:	4613      	mov	r3, r2
 8000958:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800095a:	88fb      	ldrh	r3, [r7, #6]
 800095c:	b2d8      	uxtb	r0, r3
 800095e:	88bb      	ldrh	r3, [r7, #4]
 8000960:	b2d9      	uxtb	r1, r3
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	b2da      	uxtb	r2, r3
 8000966:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800096a:	4413      	add	r3, r2
 800096c:	b2db      	uxtb	r3, r3
 800096e:	3b01      	subs	r3, #1
 8000970:	b2dc      	uxtb	r4, r3
 8000972:	88bb      	ldrh	r3, [r7, #4]
 8000974:	b2da      	uxtb	r2, r3
 8000976:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800097a:	4413      	add	r3, r2
 800097c:	b2db      	uxtb	r3, r3
 800097e:	3b01      	subs	r3, #1
 8000980:	b2db      	uxtb	r3, r3
 8000982:	4622      	mov	r2, r4
 8000984:	f7ff ff96 	bl	80008b4 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++)
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
 800098c:	e043      	b.n	8000a16 <ST7735_WriteChar+0xd2>
    {
        b = font.data[(ch - 32) * font.height + i];
 800098e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000990:	78fb      	ldrb	r3, [r7, #3]
 8000992:	3b20      	subs	r3, #32
 8000994:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000998:	fb01 f303 	mul.w	r3, r1, r3
 800099c:	4619      	mov	r1, r3
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	440b      	add	r3, r1
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	4413      	add	r3, r2
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++)
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]
 80009ae:	e029      	b.n	8000a04 <ST7735_WriteChar+0xc0>
        {
            if((b << j) & 0x8000)
 80009b0:	697a      	ldr	r2, [r7, #20]
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d00e      	beq.n	80009de <ST7735_WriteChar+0x9a>
            {
                uint8_t data[] = { color >> 8, color & 0xFF };
 80009c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80009c2:	0a1b      	lsrs	r3, r3, #8
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	743b      	strb	r3, [r7, #16]
 80009ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	2102      	movs	r1, #2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ff0a 	bl	80007f0 <ST7735_WriteData>
 80009dc:	e00f      	b.n	80009fe <ST7735_WriteChar+0xba>
            }
            else
            {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80009de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80009e2:	0a1b      	lsrs	r3, r3, #8
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	733b      	strb	r3, [r7, #12]
 80009ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	2102      	movs	r1, #2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fef9 	bl	80007f0 <ST7735_WriteData>
        for(j = 0; j < font.width; j++)
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	3301      	adds	r3, #1
 8000a02:	61bb      	str	r3, [r7, #24]
 8000a04:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000a08:	461a      	mov	r2, r3
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d3cf      	bcc.n	80009b0 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++)
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	3301      	adds	r3, #1
 8000a14:	61fb      	str	r3, [r7, #28]
 8000a16:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d3b5      	bcc.n	800098e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000a22:	bf00      	nop
 8000a24:	3724      	adds	r7, #36	; 0x24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000a2c:	b002      	add	sp, #8
 8000a2e:	4770      	bx	lr

08000a30 <ST7735_Init>:

void ST7735_Init()
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	ST7735_GPIO_Init();
 8000a34:	f7ff feac 	bl	8000790 <ST7735_GPIO_Init>
	TFT_CS_L();
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <ST7735_Init+0x34>)
 8000a3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a3e:	615a      	str	r2, [r3, #20]
    ST7735_Reset();
 8000a40:	f7ff feac 	bl	800079c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000a44:	4808      	ldr	r0, [pc, #32]	; (8000a68 <ST7735_Init+0x38>)
 8000a46:	f7ff feed 	bl	8000824 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000a4a:	4808      	ldr	r0, [pc, #32]	; (8000a6c <ST7735_Init+0x3c>)
 8000a4c:	f7ff feea 	bl	8000824 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000a50:	4807      	ldr	r0, [pc, #28]	; (8000a70 <ST7735_Init+0x40>)
 8000a52:	f7ff fee7 	bl	8000824 <ST7735_ExecuteCommandList>
    TFT_CS_H();
 8000a56:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <ST7735_Init+0x34>)
 8000a58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a5c:	611a      	str	r2, [r3, #16]
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40010c00 	.word	0x40010c00
 8000a68:	0800d370 	.word	0x0800d370
 8000a6c:	0800d3ac 	.word	0x0800d3ac
 8000a70:	0800d3bc 	.word	0x0800d3bc

08000a74 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	80fb      	strh	r3, [r7, #6]
 8000a7e:	460b      	mov	r3, r1
 8000a80:	80bb      	strh	r3, [r7, #4]
 8000a82:	4613      	mov	r3, r2
 8000a84:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8000a86:	88fb      	ldrh	r3, [r7, #6]
 8000a88:	4a19      	ldr	r2, [pc, #100]	; (8000af0 <ST7735_DrawPixel+0x7c>)
 8000a8a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	da2a      	bge.n	8000ae8 <ST7735_DrawPixel+0x74>
 8000a92:	88bb      	ldrh	r3, [r7, #4]
 8000a94:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <ST7735_DrawPixel+0x80>)
 8000a96:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	da24      	bge.n	8000ae8 <ST7735_DrawPixel+0x74>
        return;

    TFT_CS_L();
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <ST7735_DrawPixel+0x84>)
 8000aa0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aa4:	615a      	str	r2, [r3, #20]

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8000aa6:	88fb      	ldrh	r3, [r7, #6]
 8000aa8:	b2d8      	uxtb	r0, r3
 8000aaa:	88bb      	ldrh	r3, [r7, #4]
 8000aac:	b2d9      	uxtb	r1, r3
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	88bb      	ldrh	r3, [r7, #4]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	3301      	adds	r3, #1
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	f7ff fef9 	bl	80008b4 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000ac2:	887b      	ldrh	r3, [r7, #2]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	733b      	strb	r3, [r7, #12]
 8000acc:	887b      	ldrh	r3, [r7, #2]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fe89 	bl	80007f0 <ST7735_WriteData>

    TFT_CS_H();
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <ST7735_DrawPixel+0x84>)
 8000ae0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ae4:	611a      	str	r2, [r3, #16]
 8000ae6:	e000      	b.n	8000aea <ST7735_DrawPixel+0x76>
        return;
 8000ae8:	bf00      	nop
}
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	2000001e 	.word	0x2000001e
 8000af4:	2000001c 	.word	0x2000001c
 8000af8:	40010c00 	.word	0x40010c00

08000afc <ST7735_DrawString>:

void ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000afc:	b082      	sub	sp, #8
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af04      	add	r7, sp, #16
 8000b04:	603a      	str	r2, [r7, #0]
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	4603      	mov	r3, r0
 8000b0a:	80fb      	strh	r3, [r7, #6]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	80bb      	strh	r3, [r7, #4]
	TFT_CS_L();
 8000b10:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <ST7735_DrawString+0xa8>)
 8000b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b16:	615a      	str	r2, [r3, #20]

    while(*str)
 8000b18:	e033      	b.n	8000b82 <ST7735_DrawString+0x86>
    {
        if(x + font.width >= _width)
 8000b1a:	88fb      	ldrh	r3, [r7, #6]
 8000b1c:	7d3a      	ldrb	r2, [r7, #20]
 8000b1e:	4413      	add	r3, r2
 8000b20:	4a21      	ldr	r2, [pc, #132]	; (8000ba8 <ST7735_DrawString+0xac>)
 8000b22:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b26:	4293      	cmp	r3, r2
 8000b28:	db16      	blt.n	8000b58 <ST7735_DrawString+0x5c>
        {
            x = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000b2e:	7d7b      	ldrb	r3, [r7, #21]
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	88bb      	ldrh	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height)
 8000b38:	88bb      	ldrh	r3, [r7, #4]
 8000b3a:	7d7a      	ldrb	r2, [r7, #21]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4a1b      	ldr	r2, [pc, #108]	; (8000bac <ST7735_DrawString+0xb0>)
 8000b40:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b44:	4293      	cmp	r3, r2
 8000b46:	da21      	bge.n	8000b8c <ST7735_DrawString+0x90>
            {
                break;
            }

            if(*str == ' ')
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b20      	cmp	r3, #32
 8000b4e:	d103      	bne.n	8000b58 <ST7735_DrawString+0x5c>
            {
                // skip spaces in the beginning of the new line
                str++;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	3301      	adds	r3, #1
 8000b54:	603b      	str	r3, [r7, #0]
                continue;
 8000b56:	e014      	b.n	8000b82 <ST7735_DrawString+0x86>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	781a      	ldrb	r2, [r3, #0]
 8000b5c:	88b9      	ldrh	r1, [r7, #4]
 8000b5e:	88f8      	ldrh	r0, [r7, #6]
 8000b60:	8c3b      	ldrh	r3, [r7, #32]
 8000b62:	9302      	str	r3, [sp, #8]
 8000b64:	8bbb      	ldrh	r3, [r7, #28]
 8000b66:	9301      	str	r3, [sp, #4]
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	f7ff fee9 	bl	8000944 <ST7735_WriteChar>
        x += font.width;
 8000b72:	7d3b      	ldrb	r3, [r7, #20]
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	4413      	add	r3, r2
 8000b7a:	80fb      	strh	r3, [r7, #6]
        str++;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	603b      	str	r3, [r7, #0]
    while(*str)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d1c7      	bne.n	8000b1a <ST7735_DrawString+0x1e>
 8000b8a:	e000      	b.n	8000b8e <ST7735_DrawString+0x92>
                break;
 8000b8c:	bf00      	nop
    }
    TFT_CS_H();
 8000b8e:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <ST7735_DrawString+0xa8>)
 8000b90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b94:	611a      	str	r2, [r3, #16]
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ba0:	b002      	add	sp, #8
 8000ba2:	4770      	bx	lr
 8000ba4:	40010c00 	.word	0x40010c00
 8000ba8:	2000001e 	.word	0x2000001e
 8000bac:	2000001c 	.word	0x2000001c

08000bb0 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	4608      	mov	r0, r1
 8000bba:	4611      	mov	r1, r2
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4623      	mov	r3, r4
 8000bc0:	80fb      	strh	r3, [r7, #6]
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80bb      	strh	r3, [r7, #4]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	807b      	strh	r3, [r7, #2]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= _width) || (y >= _height)) return;
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	4a3a      	ldr	r2, [pc, #232]	; (8000cbc <ST7735_FillRectangle+0x10c>)
 8000bd2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	da6b      	bge.n	8000cb2 <ST7735_FillRectangle+0x102>
 8000bda:	88bb      	ldrh	r3, [r7, #4]
 8000bdc:	4a38      	ldr	r2, [pc, #224]	; (8000cc0 <ST7735_FillRectangle+0x110>)
 8000bde:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000be2:	4293      	cmp	r3, r2
 8000be4:	da65      	bge.n	8000cb2 <ST7735_FillRectangle+0x102>
    if((x + w - 1) >= _width) w = _width - x;
 8000be6:	88fa      	ldrh	r2, [r7, #6]
 8000be8:	887b      	ldrh	r3, [r7, #2]
 8000bea:	4413      	add	r3, r2
 8000bec:	3b01      	subs	r3, #1
 8000bee:	4a33      	ldr	r2, [pc, #204]	; (8000cbc <ST7735_FillRectangle+0x10c>)
 8000bf0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	db06      	blt.n	8000c06 <ST7735_FillRectangle+0x56>
 8000bf8:	4b30      	ldr	r3, [pc, #192]	; (8000cbc <ST7735_FillRectangle+0x10c>)
 8000bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000c06:	88ba      	ldrh	r2, [r7, #4]
 8000c08:	883b      	ldrh	r3, [r7, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	4a2c      	ldr	r2, [pc, #176]	; (8000cc0 <ST7735_FillRectangle+0x110>)
 8000c10:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c14:	4293      	cmp	r3, r2
 8000c16:	db06      	blt.n	8000c26 <ST7735_FillRectangle+0x76>
 8000c18:	4b29      	ldr	r3, [pc, #164]	; (8000cc0 <ST7735_FillRectangle+0x110>)
 8000c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	88bb      	ldrh	r3, [r7, #4]
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	803b      	strh	r3, [r7, #0]

    TFT_CS_L();
 8000c26:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <ST7735_FillRectangle+0x114>)
 8000c28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c2c:	615a      	str	r2, [r3, #20]
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	b2d8      	uxtb	r0, r3
 8000c32:	88bb      	ldrh	r3, [r7, #4]
 8000c34:	b2d9      	uxtb	r1, r3
 8000c36:	88fb      	ldrh	r3, [r7, #6]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	4413      	add	r3, r2
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	3b01      	subs	r3, #1
 8000c44:	b2dc      	uxtb	r4, r3
 8000c46:	88bb      	ldrh	r3, [r7, #4]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	883b      	ldrh	r3, [r7, #0]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	4413      	add	r3, r2
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	3b01      	subs	r3, #1
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	4622      	mov	r2, r4
 8000c58:	f7ff fe2c 	bl	80008b4 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000c5c:	8c3b      	ldrh	r3, [r7, #32]
 8000c5e:	0a1b      	lsrs	r3, r3, #8
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	733b      	strb	r3, [r7, #12]
 8000c66:	8c3b      	ldrh	r3, [r7, #32]
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	737b      	strb	r3, [r7, #13]
    TFT_DC_D();
 8000c6c:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <ST7735_FillRectangle+0x114>)
 8000c6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c72:	611a      	str	r2, [r3, #16]
    for(y = h; y > 0; y--)
 8000c74:	883b      	ldrh	r3, [r7, #0]
 8000c76:	80bb      	strh	r3, [r7, #4]
 8000c78:	e013      	b.n	8000ca2 <ST7735_FillRectangle+0xf2>
    {
        for(x = w; x > 0; x--)
 8000c7a:	887b      	ldrh	r3, [r7, #2]
 8000c7c:	80fb      	strh	r3, [r7, #6]
 8000c7e:	e00a      	b.n	8000c96 <ST7735_FillRectangle+0xe6>
        {
#ifdef USE_SPI_DMA
        	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, data, sizeof(data));
        	//while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
        	HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000c80:	f107 010c 	add.w	r1, r7, #12
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295
 8000c88:	2202      	movs	r2, #2
 8000c8a:	480f      	ldr	r0, [pc, #60]	; (8000cc8 <ST7735_FillRectangle+0x118>)
 8000c8c:	f001 fd19 	bl	80026c2 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--)
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	80fb      	strh	r3, [r7, #6]
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d1f1      	bne.n	8000c80 <ST7735_FillRectangle+0xd0>
    for(y = h; y > 0; y--)
 8000c9c:	88bb      	ldrh	r3, [r7, #4]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	80bb      	strh	r3, [r7, #4]
 8000ca2:	88bb      	ldrh	r3, [r7, #4]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1e8      	bne.n	8000c7a <ST7735_FillRectangle+0xca>
#endif
        }
    }
    TFT_CS_H();
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <ST7735_FillRectangle+0x114>)
 8000caa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cae:	611a      	str	r2, [r3, #16]
 8000cb0:	e000      	b.n	8000cb4 <ST7735_FillRectangle+0x104>
    if((x >= _width) || (y >= _height)) return;
 8000cb2:	bf00      	nop
}
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd90      	pop	{r4, r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	2000001e 	.word	0x2000001e
 8000cc0:	2000001c 	.word	0x2000001c
 8000cc4:	40010c00 	.word	0x40010c00
 8000cc8:	20000050 	.word	0x20000050

08000ccc <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af02      	add	r7, sp, #8
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, _width, _height, color);
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <ST7735_FillScreen+0x30>)
 8000cd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <ST7735_FillScreen+0x34>)
 8000ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ce4:	b299      	uxth	r1, r3
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	460b      	mov	r3, r1
 8000cec:	2100      	movs	r1, #0
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f7ff ff5e 	bl	8000bb0 <ST7735_FillRectangle>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	2000001e 	.word	0x2000001e
 8000d00:	2000001c 	.word	0x2000001c

08000d04 <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data)
{
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	4608      	mov	r0, r1
 8000d0e:	4611      	mov	r1, r2
 8000d10:	461a      	mov	r2, r3
 8000d12:	4623      	mov	r3, r4
 8000d14:	80fb      	strh	r3, [r7, #6]
 8000d16:	4603      	mov	r3, r0
 8000d18:	80bb      	strh	r3, [r7, #4]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	807b      	strh	r3, [r7, #2]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8000d22:	88fb      	ldrh	r3, [r7, #6]
 8000d24:	4a26      	ldr	r2, [pc, #152]	; (8000dc0 <ST7735_DrawImage+0xbc>)
 8000d26:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	da40      	bge.n	8000db0 <ST7735_DrawImage+0xac>
 8000d2e:	88bb      	ldrh	r3, [r7, #4]
 8000d30:	4a24      	ldr	r2, [pc, #144]	; (8000dc4 <ST7735_DrawImage+0xc0>)
 8000d32:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d36:	4293      	cmp	r3, r2
 8000d38:	da3a      	bge.n	8000db0 <ST7735_DrawImage+0xac>
    if((x + w - 1) >= _width) return;
 8000d3a:	88fa      	ldrh	r2, [r7, #6]
 8000d3c:	887b      	ldrh	r3, [r7, #2]
 8000d3e:	4413      	add	r3, r2
 8000d40:	3b01      	subs	r3, #1
 8000d42:	4a1f      	ldr	r2, [pc, #124]	; (8000dc0 <ST7735_DrawImage+0xbc>)
 8000d44:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	da33      	bge.n	8000db4 <ST7735_DrawImage+0xb0>
    if((y + h - 1) >= _height) return;
 8000d4c:	88ba      	ldrh	r2, [r7, #4]
 8000d4e:	883b      	ldrh	r3, [r7, #0]
 8000d50:	4413      	add	r3, r2
 8000d52:	3b01      	subs	r3, #1
 8000d54:	4a1b      	ldr	r2, [pc, #108]	; (8000dc4 <ST7735_DrawImage+0xc0>)
 8000d56:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	da2c      	bge.n	8000db8 <ST7735_DrawImage+0xb4>

    TFT_CS_L();
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <ST7735_DrawImage+0xc4>)
 8000d60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d64:	615a      	str	r2, [r3, #20]
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	b2d8      	uxtb	r0, r3
 8000d6a:	88bb      	ldrh	r3, [r7, #4]
 8000d6c:	b2d9      	uxtb	r1, r3
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	887b      	ldrh	r3, [r7, #2]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	4413      	add	r3, r2
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	b2dc      	uxtb	r4, r3
 8000d7e:	88bb      	ldrh	r3, [r7, #4]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	883b      	ldrh	r3, [r7, #0]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	4413      	add	r3, r2
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	4622      	mov	r2, r4
 8000d90:	f7ff fd90 	bl	80008b4 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8000d94:	887b      	ldrh	r3, [r7, #2]
 8000d96:	883a      	ldrh	r2, [r7, #0]
 8000d98:	fb02 f303 	mul.w	r3, r2, r3
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4619      	mov	r1, r3
 8000da0:	69b8      	ldr	r0, [r7, #24]
 8000da2:	f7ff fd25 	bl	80007f0 <ST7735_WriteData>
    TFT_CS_H();
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <ST7735_DrawImage+0xc4>)
 8000da8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dac:	611a      	str	r2, [r3, #16]
 8000dae:	e004      	b.n	8000dba <ST7735_DrawImage+0xb6>
    if((x >= _width) || (y >= _height)) return;
 8000db0:	bf00      	nop
 8000db2:	e002      	b.n	8000dba <ST7735_DrawImage+0xb6>
    if((x + w - 1) >= _width) return;
 8000db4:	bf00      	nop
 8000db6:	e000      	b.n	8000dba <ST7735_DrawImage+0xb6>
    if((y + h - 1) >= _height) return;
 8000db8:	bf00      	nop
}
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd90      	pop	{r4, r7, pc}
 8000dc0:	2000001e 	.word	0x2000001e
 8000dc4:	2000001c 	.word	0x2000001c
 8000dc8:	40010c00 	.word	0x40010c00

08000dcc <ST7735_Backlight_On>:
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
    TFT_CS_H();
}

void ST7735_Backlight_On(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
	TFT_BL_H();
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <ST7735_Backlight_On+0x14>)
 8000dd2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dd6:	611a      	str	r2, [r3, #16]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr
 8000de0:	40010c00 	.word	0x40010c00

08000de4 <ST7735_DrawCircle>:
/***************************************************************************************
** Function name:           drawCircle
** Description:             Draw a circle outline
***************************************************************************************/
void ST7735_DrawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4604      	mov	r4, r0
 8000dec:	4608      	mov	r0, r1
 8000dee:	4611      	mov	r1, r2
 8000df0:	461a      	mov	r2, r3
 8000df2:	4623      	mov	r3, r4
 8000df4:	80fb      	strh	r3, [r7, #6]
 8000df6:	4603      	mov	r3, r0
 8000df8:	80bb      	strh	r3, [r7, #4]
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	807b      	strh	r3, [r7, #2]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	803b      	strh	r3, [r7, #0]
  int16_t f = 1 - r;
 8000e02:	887b      	ldrh	r3, [r7, #2]
 8000e04:	f1c3 0301 	rsb	r3, r3, #1
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	81fb      	strh	r3, [r7, #14]
  int16_t ddF_x = 1;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	81bb      	strh	r3, [r7, #12]
  int16_t ddF_y = - r - r;
 8000e10:	887b      	ldrh	r3, [r7, #2]
 8000e12:	425b      	negs	r3, r3
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	887b      	ldrh	r3, [r7, #2]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	817b      	strh	r3, [r7, #10]
  int16_t x = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	813b      	strh	r3, [r7, #8]

  ST7735_DrawPixel(x0 + r, y0  , color);
 8000e22:	88fa      	ldrh	r2, [r7, #6]
 8000e24:	887b      	ldrh	r3, [r7, #2]
 8000e26:	4413      	add	r3, r2
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	88b9      	ldrh	r1, [r7, #4]
 8000e2c:	883a      	ldrh	r2, [r7, #0]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fe20 	bl	8000a74 <ST7735_DrawPixel>
  ST7735_DrawPixel(x0 - r, y0  , color);
 8000e34:	88fa      	ldrh	r2, [r7, #6]
 8000e36:	887b      	ldrh	r3, [r7, #2]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	88b9      	ldrh	r1, [r7, #4]
 8000e3e:	883a      	ldrh	r2, [r7, #0]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fe17 	bl	8000a74 <ST7735_DrawPixel>
  ST7735_DrawPixel(x0  , y0 - r, color);
 8000e46:	88f8      	ldrh	r0, [r7, #6]
 8000e48:	88ba      	ldrh	r2, [r7, #4]
 8000e4a:	887b      	ldrh	r3, [r7, #2]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	883a      	ldrh	r2, [r7, #0]
 8000e52:	4619      	mov	r1, r3
 8000e54:	f7ff fe0e 	bl	8000a74 <ST7735_DrawPixel>
  ST7735_DrawPixel(x0  , y0 + r, color);
 8000e58:	88f8      	ldrh	r0, [r7, #6]
 8000e5a:	88ba      	ldrh	r2, [r7, #4]
 8000e5c:	887b      	ldrh	r3, [r7, #2]
 8000e5e:	4413      	add	r3, r2
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	883a      	ldrh	r2, [r7, #0]
 8000e64:	4619      	mov	r1, r3
 8000e66:	f7ff fe05 	bl	8000a74 <ST7735_DrawPixel>

  while (x < r)
 8000e6a:	e081      	b.n	8000f70 <ST7735_DrawCircle+0x18c>
  {
    if (f >= 0)
 8000e6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	db0e      	blt.n	8000e92 <ST7735_DrawCircle+0xae>
    {
      r--;
 8000e74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	807b      	strh	r3, [r7, #2]
      ddF_y += 2;
 8000e80:	897b      	ldrh	r3, [r7, #10]
 8000e82:	3302      	adds	r3, #2
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	817b      	strh	r3, [r7, #10]
      f += ddF_y;
 8000e88:	89fa      	ldrh	r2, [r7, #14]
 8000e8a:	897b      	ldrh	r3, [r7, #10]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	81fb      	strh	r3, [r7, #14]
    }
    x++;
 8000e92:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	3301      	adds	r3, #1
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	813b      	strh	r3, [r7, #8]
    ddF_x += 2;
 8000e9e:	89bb      	ldrh	r3, [r7, #12]
 8000ea0:	3302      	adds	r3, #2
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	81bb      	strh	r3, [r7, #12]
    f += ddF_x;
 8000ea6:	89fa      	ldrh	r2, [r7, #14]
 8000ea8:	89bb      	ldrh	r3, [r7, #12]
 8000eaa:	4413      	add	r3, r2
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	81fb      	strh	r3, [r7, #14]

    ST7735_DrawPixel(x0 + x, y0 + r, color);
 8000eb0:	88fa      	ldrh	r2, [r7, #6]
 8000eb2:	893b      	ldrh	r3, [r7, #8]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	b298      	uxth	r0, r3
 8000eb8:	88ba      	ldrh	r2, [r7, #4]
 8000eba:	887b      	ldrh	r3, [r7, #2]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	883a      	ldrh	r2, [r7, #0]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f7ff fdd6 	bl	8000a74 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - x, y0 + r, color);
 8000ec8:	88fa      	ldrh	r2, [r7, #6]
 8000eca:	893b      	ldrh	r3, [r7, #8]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	b298      	uxth	r0, r3
 8000ed0:	88ba      	ldrh	r2, [r7, #4]
 8000ed2:	887b      	ldrh	r3, [r7, #2]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	883a      	ldrh	r2, [r7, #0]
 8000eda:	4619      	mov	r1, r3
 8000edc:	f7ff fdca 	bl	8000a74 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - x, y0 - r, color);
 8000ee0:	88fa      	ldrh	r2, [r7, #6]
 8000ee2:	893b      	ldrh	r3, [r7, #8]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	b298      	uxth	r0, r3
 8000ee8:	88ba      	ldrh	r2, [r7, #4]
 8000eea:	887b      	ldrh	r3, [r7, #2]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	883a      	ldrh	r2, [r7, #0]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f7ff fdbe 	bl	8000a74 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 + x, y0 - r, color);
 8000ef8:	88fa      	ldrh	r2, [r7, #6]
 8000efa:	893b      	ldrh	r3, [r7, #8]
 8000efc:	4413      	add	r3, r2
 8000efe:	b298      	uxth	r0, r3
 8000f00:	88ba      	ldrh	r2, [r7, #4]
 8000f02:	887b      	ldrh	r3, [r7, #2]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	883a      	ldrh	r2, [r7, #0]
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f7ff fdb2 	bl	8000a74 <ST7735_DrawPixel>

    ST7735_DrawPixel(x0 + r, y0 + x, color);
 8000f10:	88fa      	ldrh	r2, [r7, #6]
 8000f12:	887b      	ldrh	r3, [r7, #2]
 8000f14:	4413      	add	r3, r2
 8000f16:	b298      	uxth	r0, r3
 8000f18:	88ba      	ldrh	r2, [r7, #4]
 8000f1a:	893b      	ldrh	r3, [r7, #8]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	883a      	ldrh	r2, [r7, #0]
 8000f22:	4619      	mov	r1, r3
 8000f24:	f7ff fda6 	bl	8000a74 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - r, y0 + x, color);
 8000f28:	88fa      	ldrh	r2, [r7, #6]
 8000f2a:	887b      	ldrh	r3, [r7, #2]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	b298      	uxth	r0, r3
 8000f30:	88ba      	ldrh	r2, [r7, #4]
 8000f32:	893b      	ldrh	r3, [r7, #8]
 8000f34:	4413      	add	r3, r2
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	883a      	ldrh	r2, [r7, #0]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f7ff fd9a 	bl	8000a74 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - r, y0 - x, color);
 8000f40:	88fa      	ldrh	r2, [r7, #6]
 8000f42:	887b      	ldrh	r3, [r7, #2]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	b298      	uxth	r0, r3
 8000f48:	88ba      	ldrh	r2, [r7, #4]
 8000f4a:	893b      	ldrh	r3, [r7, #8]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	883a      	ldrh	r2, [r7, #0]
 8000f52:	4619      	mov	r1, r3
 8000f54:	f7ff fd8e 	bl	8000a74 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 + r, y0 - x, color);
 8000f58:	88fa      	ldrh	r2, [r7, #6]
 8000f5a:	887b      	ldrh	r3, [r7, #2]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	b298      	uxth	r0, r3
 8000f60:	88ba      	ldrh	r2, [r7, #4]
 8000f62:	893b      	ldrh	r3, [r7, #8]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	883a      	ldrh	r2, [r7, #0]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f7ff fd82 	bl	8000a74 <ST7735_DrawPixel>
  while (x < r)
 8000f70:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000f74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	f6ff af77 	blt.w	8000e6c <ST7735_DrawCircle+0x88>
  }
}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd90      	pop	{r4, r7, pc}

08000f86 <ST7735_FillTriangle>:
** Function name:           fillTriangle
** Description:             Draw a filled triangle using 3 arbitrary points
***************************************************************************************/
// Fill a triangle - original Adafruit function works well and code footprint is small
void ST7735_FillTriangle( int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8000f86:	b590      	push	{r4, r7, lr}
 8000f88:	b08d      	sub	sp, #52	; 0x34
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4604      	mov	r4, r0
 8000f8e:	4608      	mov	r0, r1
 8000f90:	4611      	mov	r1, r2
 8000f92:	461a      	mov	r2, r3
 8000f94:	4623      	mov	r3, r4
 8000f96:	80fb      	strh	r3, [r7, #6]
 8000f98:	4603      	mov	r3, r0
 8000f9a:	80bb      	strh	r3, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	807b      	strh	r3, [r7, #2]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	803b      	strh	r3, [r7, #0]
  int16_t a, b, y, last;

  // Sort coordinates by Y order (y2 >= y1 >= y0)
  if (y0 > y1)
 8000fa4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000fa8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	dd0b      	ble.n	8000fc8 <ST7735_FillTriangle+0x42>
  {
	  SWAP_INT16_T(y0, y1); SWAP_INT16_T(x0, x1);
 8000fb0:	88bb      	ldrh	r3, [r7, #4]
 8000fb2:	847b      	strh	r3, [r7, #34]	; 0x22
 8000fb4:	883b      	ldrh	r3, [r7, #0]
 8000fb6:	80bb      	strh	r3, [r7, #4]
 8000fb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000fba:	803b      	strh	r3, [r7, #0]
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	843b      	strh	r3, [r7, #32]
 8000fc0:	887b      	ldrh	r3, [r7, #2]
 8000fc2:	80fb      	strh	r3, [r7, #6]
 8000fc4:	8c3b      	ldrh	r3, [r7, #32]
 8000fc6:	807b      	strh	r3, [r7, #2]
  }

  if (y1 > y2)
 8000fc8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000fcc:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	dd0f      	ble.n	8000ff4 <ST7735_FillTriangle+0x6e>
  {
	  SWAP_INT16_T(y2, y1); SWAP_INT16_T(x2, x1);
 8000fd4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000fd8:	83fb      	strh	r3, [r7, #30]
 8000fda:	883b      	ldrh	r3, [r7, #0]
 8000fdc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8000fe0:	8bfb      	ldrh	r3, [r7, #30]
 8000fe2:	803b      	strh	r3, [r7, #0]
 8000fe4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000fe8:	83bb      	strh	r3, [r7, #28]
 8000fea:	887b      	ldrh	r3, [r7, #2]
 8000fec:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8000ff0:	8bbb      	ldrh	r3, [r7, #28]
 8000ff2:	807b      	strh	r3, [r7, #2]
  }

  if (y0 > y1)
 8000ff4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ff8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dd0b      	ble.n	8001018 <ST7735_FillTriangle+0x92>
  {
	  SWAP_INT16_T(y0, y1); SWAP_INT16_T(x0, x1);
 8001000:	88bb      	ldrh	r3, [r7, #4]
 8001002:	837b      	strh	r3, [r7, #26]
 8001004:	883b      	ldrh	r3, [r7, #0]
 8001006:	80bb      	strh	r3, [r7, #4]
 8001008:	8b7b      	ldrh	r3, [r7, #26]
 800100a:	803b      	strh	r3, [r7, #0]
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	833b      	strh	r3, [r7, #24]
 8001010:	887b      	ldrh	r3, [r7, #2]
 8001012:	80fb      	strh	r3, [r7, #6]
 8001014:	8b3b      	ldrh	r3, [r7, #24]
 8001016:	807b      	strh	r3, [r7, #2]
  }

  if (y0 == y2)
 8001018:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800101c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001020:	429a      	cmp	r2, r3
 8001022:	d137      	bne.n	8001094 <ST7735_FillTriangle+0x10e>
  { // Handle awkward all-on-same-line case as its own thing
    a = b = x0;
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001028:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800102a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (x1 < a)      a = x1;
 800102c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001030:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001034:	429a      	cmp	r2, r3
 8001036:	da02      	bge.n	800103e <ST7735_FillTriangle+0xb8>
 8001038:	887b      	ldrh	r3, [r7, #2]
 800103a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800103c:	e007      	b.n	800104e <ST7735_FillTriangle+0xc8>
    else if (x1 > b) b = x1;
 800103e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001042:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001046:	429a      	cmp	r2, r3
 8001048:	dd01      	ble.n	800104e <ST7735_FillTriangle+0xc8>
 800104a:	887b      	ldrh	r3, [r7, #2]
 800104c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (x2 < a)      a = x2;
 800104e:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8001052:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001056:	429a      	cmp	r2, r3
 8001058:	da03      	bge.n	8001062 <ST7735_FillTriangle+0xdc>
 800105a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800105e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001060:	e008      	b.n	8001074 <ST7735_FillTriangle+0xee>
    else if (x2 > b) b = x2;
 8001062:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8001066:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800106a:	429a      	cmp	r2, r3
 800106c:	dd02      	ble.n	8001074 <ST7735_FillTriangle+0xee>
 800106e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001072:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ST7735_DrawFastHLine(a, y0, b - a + 1, color);
 8001074:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001076:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	b29b      	uxth	r3, r3
 800107c:	3301      	adds	r3, #1
 800107e:	b29b      	uxth	r3, r3
 8001080:	b21a      	sxth	r2, r3
 8001082:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001086:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800108a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800108e:	f000 f9c9 	bl	8001424 <ST7735_DrawFastHLine>
    return;
 8001092:	e0da      	b.n	800124a <ST7735_FillTriangle+0x2c4>
  }

  int16_t
  dx01 = x1 - x0,
 8001094:	887a      	ldrh	r2, [r7, #2]
 8001096:	88fb      	ldrh	r3, [r7, #6]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	82fb      	strh	r3, [r7, #22]
  dy01 = y1 - y0,
 800109e:	883a      	ldrh	r2, [r7, #0]
 80010a0:	88bb      	ldrh	r3, [r7, #4]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	82bb      	strh	r3, [r7, #20]
  dx02 = x2 - x0,
 80010a8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	827b      	strh	r3, [r7, #18]
  dy02 = y2 - y0,
 80010b4:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80010b8:	88bb      	ldrh	r3, [r7, #4]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	b29b      	uxth	r3, r3
 80010be:	823b      	strh	r3, [r7, #16]
  dx12 = x2 - x1,
 80010c0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80010c4:	887b      	ldrh	r3, [r7, #2]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	81fb      	strh	r3, [r7, #14]
  dy12 = y2 - y1,
 80010cc:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80010d0:	883b      	ldrh	r3, [r7, #0]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	81bb      	strh	r3, [r7, #12]
  sa   = 0,
 80010d8:	2300      	movs	r3, #0
 80010da:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb   = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	84bb      	strh	r3, [r7, #36]	; 0x24
  // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
  // is included here (and second loop will be skipped, avoiding a /0
  // error there), otherwise scanline y1 is skipped here and handled
  // in the second loop...which also avoids a /0 error here if y0=y1
  // (flat-topped triangle).
  if (y1 == y2) last = y1;  // Include y1 scanline
 80010e0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80010e4:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d102      	bne.n	80010f2 <ST7735_FillTriangle+0x16c>
 80010ec:	883b      	ldrh	r3, [r7, #0]
 80010ee:	853b      	strh	r3, [r7, #40]	; 0x28
 80010f0:	e003      	b.n	80010fa <ST7735_FillTriangle+0x174>
  else         last = y1 - 1; // Skip it
 80010f2:	883b      	ldrh	r3, [r7, #0]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	853b      	strh	r3, [r7, #40]	; 0x28

  for (y = y0; y <= last; y++)
 80010fa:	88bb      	ldrh	r3, [r7, #4]
 80010fc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80010fe:	e040      	b.n	8001182 <ST7735_FillTriangle+0x1fc>
  {
    a   = x0 + sa / dy01;
 8001100:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001104:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001108:	fb92 f3f3 	sdiv	r3, r2, r3
 800110c:	b29a      	uxth	r2, r3
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	4413      	add	r3, r2
 8001112:	b29b      	uxth	r3, r3
 8001114:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x0 + sb / dy02;
 8001116:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800111a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800111e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001122:	b29a      	uxth	r2, r3
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	4413      	add	r3, r2
 8001128:	b29b      	uxth	r3, r3
 800112a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx01;
 800112c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800112e:	8afb      	ldrh	r3, [r7, #22]
 8001130:	4413      	add	r3, r2
 8001132:	b29b      	uxth	r3, r3
 8001134:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 8001136:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001138:	8a7b      	ldrh	r3, [r7, #18]
 800113a:	4413      	add	r3, r2
 800113c:	b29b      	uxth	r3, r3
 800113e:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (a > b) SWAP_INT16_T(a, b);
 8001140:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001144:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001148:	429a      	cmp	r2, r3
 800114a:	dd05      	ble.n	8001158 <ST7735_FillTriangle+0x1d2>
 800114c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800114e:	813b      	strh	r3, [r7, #8]
 8001150:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001152:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001154:	893b      	ldrh	r3, [r7, #8]
 8001156:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ST7735_DrawFastHLine(a, y, b - a + 1, color);
 8001158:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800115a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	b29b      	uxth	r3, r3
 8001160:	3301      	adds	r3, #1
 8001162:	b29b      	uxth	r3, r3
 8001164:	b21a      	sxth	r2, r3
 8001166:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800116a:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 800116e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001172:	f000 f957 	bl	8001424 <ST7735_DrawFastHLine>
  for (y = y0; y <= last; y++)
 8001176:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800117a:	b29b      	uxth	r3, r3
 800117c:	3301      	adds	r3, #1
 800117e:	b29b      	uxth	r3, r3
 8001180:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001182:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8001186:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800118a:	429a      	cmp	r2, r3
 800118c:	ddb8      	ble.n	8001100 <ST7735_FillTriangle+0x17a>
  }

  // For lower part of triangle, find scanline crossings for segments
  // 0-2 and 1-2.  This loop is skipped if y1=y2.
  sa = dx12 * (y - y1);
 800118e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8001192:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	b29b      	uxth	r3, r3
 800119a:	89fa      	ldrh	r2, [r7, #14]
 800119c:	fb02 f303 	mul.w	r3, r2, r3
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb = dx02 * (y - y0);
 80011a4:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80011a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	8a7a      	ldrh	r2, [r7, #18]
 80011b2:	fb02 f303 	mul.w	r3, r2, r3
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (; y <= y2; y++)
 80011ba:	e040      	b.n	800123e <ST7735_FillTriangle+0x2b8>
  {
    a   = x1 + sa / dy12;
 80011bc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80011c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	887b      	ldrh	r3, [r7, #2]
 80011cc:	4413      	add	r3, r2
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x0 + sb / dy02;
 80011d2:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80011d6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80011da:	fb92 f3f3 	sdiv	r3, r2, r3
 80011de:	b29a      	uxth	r2, r3
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	4413      	add	r3, r2
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx12;
 80011e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80011ea:	89fb      	ldrh	r3, [r7, #14]
 80011ec:	4413      	add	r3, r2
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 80011f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80011f4:	8a7b      	ldrh	r3, [r7, #18]
 80011f6:	4413      	add	r3, r2
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (a > b) SWAP_INT16_T(a, b);
 80011fc:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001200:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001204:	429a      	cmp	r2, r3
 8001206:	dd05      	ble.n	8001214 <ST7735_FillTriangle+0x28e>
 8001208:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800120a:	817b      	strh	r3, [r7, #10]
 800120c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800120e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001210:	897b      	ldrh	r3, [r7, #10]
 8001212:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ST7735_DrawFastHLine(a, y, b - a + 1, color);
 8001214:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001216:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	b29b      	uxth	r3, r3
 800121c:	3301      	adds	r3, #1
 800121e:	b29b      	uxth	r3, r3
 8001220:	b21a      	sxth	r2, r3
 8001222:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001226:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 800122a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800122e:	f000 f8f9 	bl	8001424 <ST7735_DrawFastHLine>
  for (; y <= y2; y++)
 8001232:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001236:	b29b      	uxth	r3, r3
 8001238:	3301      	adds	r3, #1
 800123a:	b29b      	uxth	r3, r3
 800123c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800123e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8001242:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001246:	429a      	cmp	r2, r3
 8001248:	ddb8      	ble.n	80011bc <ST7735_FillTriangle+0x236>
  }
}
 800124a:	3734      	adds	r7, #52	; 0x34
 800124c:	46bd      	mov	sp, r7
 800124e:	bd90      	pop	{r4, r7, pc}

08001250 <ST7735_DrawLine>:
** Description:             draw a line between 2 arbitrary points
***************************************************************************************/

// Slower but more compact line drawing function
void ST7735_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	4604      	mov	r4, r0
 8001258:	4608      	mov	r0, r1
 800125a:	4611      	mov	r1, r2
 800125c:	461a      	mov	r2, r3
 800125e:	4623      	mov	r3, r4
 8001260:	80fb      	strh	r3, [r7, #6]
 8001262:	4603      	mov	r3, r0
 8001264:	80bb      	strh	r3, [r7, #4]
 8001266:	460b      	mov	r3, r1
 8001268:	807b      	strh	r3, [r7, #2]
 800126a:	4613      	mov	r3, r2
 800126c:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800126e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001272:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800127c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001280:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001288:	1acb      	subs	r3, r1, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	bfb8      	it	lt
 800128e:	425b      	neglt	r3, r3
 8001290:	429a      	cmp	r2, r3
 8001292:	bfcc      	ite	gt
 8001294:	2301      	movgt	r3, #1
 8001296:	2300      	movle	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	837b      	strh	r3, [r7, #26]
	if (steep)
 800129c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00b      	beq.n	80012bc <ST7735_DrawLine+0x6c>
	{
		SWAP_INT16_T(x0, y0);
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	833b      	strh	r3, [r7, #24]
 80012a8:	88bb      	ldrh	r3, [r7, #4]
 80012aa:	80fb      	strh	r3, [r7, #6]
 80012ac:	8b3b      	ldrh	r3, [r7, #24]
 80012ae:	80bb      	strh	r3, [r7, #4]
		SWAP_INT16_T(x1, y1);
 80012b0:	887b      	ldrh	r3, [r7, #2]
 80012b2:	82fb      	strh	r3, [r7, #22]
 80012b4:	883b      	ldrh	r3, [r7, #0]
 80012b6:	807b      	strh	r3, [r7, #2]
 80012b8:	8afb      	ldrh	r3, [r7, #22]
 80012ba:	803b      	strh	r3, [r7, #0]
	}

	if (x0 > x1)
 80012bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80012c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	dd0b      	ble.n	80012e0 <ST7735_DrawLine+0x90>
	{
		SWAP_INT16_T(x0, x1);
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	82bb      	strh	r3, [r7, #20]
 80012cc:	887b      	ldrh	r3, [r7, #2]
 80012ce:	80fb      	strh	r3, [r7, #6]
 80012d0:	8abb      	ldrh	r3, [r7, #20]
 80012d2:	807b      	strh	r3, [r7, #2]
		SWAP_INT16_T(y0, y1);
 80012d4:	88bb      	ldrh	r3, [r7, #4]
 80012d6:	827b      	strh	r3, [r7, #18]
 80012d8:	883b      	ldrh	r3, [r7, #0]
 80012da:	80bb      	strh	r3, [r7, #4]
 80012dc:	8a7b      	ldrh	r3, [r7, #18]
 80012de:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x1 - x0;
 80012e0:	887a      	ldrh	r2, [r7, #2]
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	823b      	strh	r3, [r7, #16]
	dy = abs(y1 - y0);
 80012ea:	f9b7 2000 	ldrsh.w	r2, [r7]
 80012ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	bfb8      	it	lt
 80012f8:	425b      	neglt	r3, r3
 80012fa:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 80012fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001300:	0fda      	lsrs	r2, r3, #31
 8001302:	4413      	add	r3, r2
 8001304:	105b      	asrs	r3, r3, #1
 8001306:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y0 < y1)
 8001308:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800130c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001310:	429a      	cmp	r2, r3
 8001312:	da02      	bge.n	800131a <ST7735_DrawLine+0xca>
	{
		ystep = 1;
 8001314:	2301      	movs	r3, #1
 8001316:	83bb      	strh	r3, [r7, #28]
 8001318:	e02d      	b.n	8001376 <ST7735_DrawLine+0x126>
	}
	else
	{
		ystep = -1;
 800131a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800131e:	83bb      	strh	r3, [r7, #28]
	}

	for (; x0<=x1; x0++)
 8001320:	e029      	b.n	8001376 <ST7735_DrawLine+0x126>
	{
		if (steep)
 8001322:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d006      	beq.n	8001338 <ST7735_DrawLine+0xe8>
		{
			ST7735_DrawPixel(y0, x0, color);
 800132a:	88bb      	ldrh	r3, [r7, #4]
 800132c:	88f9      	ldrh	r1, [r7, #6]
 800132e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fb9f 	bl	8000a74 <ST7735_DrawPixel>
 8001336:	e005      	b.n	8001344 <ST7735_DrawLine+0xf4>
		}
		else
		{
			ST7735_DrawPixel(x0, y0, color);
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	88b9      	ldrh	r1, [r7, #4]
 800133c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fb98 	bl	8000a74 <ST7735_DrawPixel>
		}
		err -= dy;
 8001344:	8bfa      	ldrh	r2, [r7, #30]
 8001346:	89fb      	ldrh	r3, [r7, #14]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	b29b      	uxth	r3, r3
 800134c:	83fb      	strh	r3, [r7, #30]
		if (err < 0)
 800134e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001352:	2b00      	cmp	r3, #0
 8001354:	da09      	bge.n	800136a <ST7735_DrawLine+0x11a>
		{
			y0 += ystep;
 8001356:	88ba      	ldrh	r2, [r7, #4]
 8001358:	8bbb      	ldrh	r3, [r7, #28]
 800135a:	4413      	add	r3, r2
 800135c:	b29b      	uxth	r3, r3
 800135e:	80bb      	strh	r3, [r7, #4]
			err += dx;
 8001360:	8bfa      	ldrh	r2, [r7, #30]
 8001362:	8a3b      	ldrh	r3, [r7, #16]
 8001364:	4413      	add	r3, r2
 8001366:	b29b      	uxth	r3, r3
 8001368:	83fb      	strh	r3, [r7, #30]
	for (; x0<=x1; x0++)
 800136a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800136e:	b29b      	uxth	r3, r3
 8001370:	3301      	adds	r3, #1
 8001372:	b29b      	uxth	r3, r3
 8001374:	80fb      	strh	r3, [r7, #6]
 8001376:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800137a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800137e:	429a      	cmp	r2, r3
 8001380:	ddcf      	ble.n	8001322 <ST7735_DrawLine+0xd2>
		}
	}
}
 8001382:	bf00      	nop
 8001384:	3724      	adds	r7, #36	; 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd90      	pop	{r4, r7, pc}
	...

0800138c <ST7735_DrawFastVLine>:
/***************************************************************************************
** Function name:           drawFastVLine
** Description:             draw a vertical line
***************************************************************************************/
void ST7735_DrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b085      	sub	sp, #20
 8001390:	af02      	add	r7, sp, #8
 8001392:	4604      	mov	r4, r0
 8001394:	4608      	mov	r0, r1
 8001396:	4611      	mov	r1, r2
 8001398:	461a      	mov	r2, r3
 800139a:	4623      	mov	r3, r4
 800139c:	80fb      	strh	r3, [r7, #6]
 800139e:	4603      	mov	r3, r0
 80013a0:	80bb      	strh	r3, [r7, #4]
 80013a2:	460b      	mov	r3, r1
 80013a4:	807b      	strh	r3, [r7, #2]
 80013a6:	4613      	mov	r3, r2
 80013a8:	803b      	strh	r3, [r7, #0]
  // Rudimentary clipping
  if ((x >= _width) || (y >= _height)) return;
 80013aa:	4b1c      	ldr	r3, [pc, #112]	; (800141c <ST7735_DrawFastVLine+0x90>)
 80013ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	da2c      	bge.n	8001412 <ST7735_DrawFastVLine+0x86>
 80013b8:	4b19      	ldr	r3, [pc, #100]	; (8001420 <ST7735_DrawFastVLine+0x94>)
 80013ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013be:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	da25      	bge.n	8001412 <ST7735_DrawFastVLine+0x86>
  if ((y + h - 1) >= _height) h = _height - y;
 80013c6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80013ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013ce:	4413      	add	r3, r2
 80013d0:	3b01      	subs	r3, #1
 80013d2:	4a13      	ldr	r2, [pc, #76]	; (8001420 <ST7735_DrawFastVLine+0x94>)
 80013d4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013d8:	4293      	cmp	r3, r2
 80013da:	db07      	blt.n	80013ec <ST7735_DrawFastVLine+0x60>
 80013dc:	4b10      	ldr	r3, [pc, #64]	; (8001420 <ST7735_DrawFastVLine+0x94>)
 80013de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	88bb      	ldrh	r3, [r7, #4]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	807b      	strh	r3, [r7, #2]

  ST7735_DrawLine(x, y, x, y + h - 1, color);
 80013ec:	88ba      	ldrh	r2, [r7, #4]
 80013ee:	887b      	ldrh	r3, [r7, #2]
 80013f0:	4413      	add	r3, r2
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	3b01      	subs	r3, #1
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b21c      	sxth	r4, r3
 80013fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001402:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001406:	883b      	ldrh	r3, [r7, #0]
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	4623      	mov	r3, r4
 800140c:	f7ff ff20 	bl	8001250 <ST7735_DrawLine>
 8001410:	e000      	b.n	8001414 <ST7735_DrawFastVLine+0x88>
  if ((x >= _width) || (y >= _height)) return;
 8001412:	bf00      	nop
}
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bd90      	pop	{r4, r7, pc}
 800141a:	bf00      	nop
 800141c:	2000001e 	.word	0x2000001e
 8001420:	2000001c 	.word	0x2000001c

08001424 <ST7735_DrawFastHLine>:
/***************************************************************************************
** Function name:           drawFastHLine
** Description:             draw a horizontal line
***************************************************************************************/
void ST7735_DrawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b085      	sub	sp, #20
 8001428:	af02      	add	r7, sp, #8
 800142a:	4604      	mov	r4, r0
 800142c:	4608      	mov	r0, r1
 800142e:	4611      	mov	r1, r2
 8001430:	461a      	mov	r2, r3
 8001432:	4623      	mov	r3, r4
 8001434:	80fb      	strh	r3, [r7, #6]
 8001436:	4603      	mov	r3, r0
 8001438:	80bb      	strh	r3, [r7, #4]
 800143a:	460b      	mov	r3, r1
 800143c:	807b      	strh	r3, [r7, #2]
 800143e:	4613      	mov	r3, r2
 8001440:	803b      	strh	r3, [r7, #0]
  // Rudimentary clipping
  if ((x >= _width) || (y >= _height)) return;
 8001442:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <ST7735_DrawFastHLine+0x90>)
 8001444:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001448:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800144c:	429a      	cmp	r2, r3
 800144e:	da2c      	bge.n	80014aa <ST7735_DrawFastHLine+0x86>
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <ST7735_DrawFastHLine+0x94>)
 8001452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001456:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800145a:	429a      	cmp	r2, r3
 800145c:	da25      	bge.n	80014aa <ST7735_DrawFastHLine+0x86>
  if ((x + w - 1) >= _width)  w = _width - x;
 800145e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001462:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001466:	4413      	add	r3, r2
 8001468:	3b01      	subs	r3, #1
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <ST7735_DrawFastHLine+0x90>)
 800146c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001470:	4293      	cmp	r3, r2
 8001472:	db07      	blt.n	8001484 <ST7735_DrawFastHLine+0x60>
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <ST7735_DrawFastHLine+0x90>)
 8001476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800147a:	b29a      	uxth	r2, r3
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	b29b      	uxth	r3, r3
 8001482:	807b      	strh	r3, [r7, #2]

  ST7735_DrawLine(x, y, x + w - 1, y, color);
 8001484:	88fa      	ldrh	r2, [r7, #6]
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	4413      	add	r3, r2
 800148a:	b29b      	uxth	r3, r3
 800148c:	3b01      	subs	r3, #1
 800148e:	b29b      	uxth	r3, r3
 8001490:	b21a      	sxth	r2, r3
 8001492:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001496:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800149a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800149e:	883b      	ldrh	r3, [r7, #0]
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	4623      	mov	r3, r4
 80014a4:	f7ff fed4 	bl	8001250 <ST7735_DrawLine>
 80014a8:	e000      	b.n	80014ac <ST7735_DrawFastHLine+0x88>
  if ((x >= _width) || (y >= _height)) return;
 80014aa:	bf00      	nop
}
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd90      	pop	{r4, r7, pc}
 80014b2:	bf00      	nop
 80014b4:	2000001e 	.word	0x2000001e
 80014b8:	2000001c 	.word	0x2000001c

080014bc <ST7735_SetRotation>:
/***************************************************************************************
** Function name:           setRotation
** Description:             rotate the screen orientation m = 0-3
***************************************************************************************/
void ST7735_SetRotation(uint8_t m)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
  _value_rotation = m % 4;
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b48      	ldr	r3, [pc, #288]	; (80015f0 <ST7735_SetRotation+0x134>)
 80014d0:	701a      	strb	r2, [r3, #0]

  TFT_CS_L();
 80014d2:	4b48      	ldr	r3, [pc, #288]	; (80015f4 <ST7735_SetRotation+0x138>)
 80014d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014d8:	615a      	str	r2, [r3, #20]

  ST7735_WriteCommand(ST7735_MADCTL);
 80014da:	2036      	movs	r0, #54	; 0x36
 80014dc:	f7ff f970 	bl	80007c0 <ST7735_WriteCommand>

  switch (_value_rotation)
 80014e0:	4b43      	ldr	r3, [pc, #268]	; (80015f0 <ST7735_SetRotation+0x134>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b03      	cmp	r3, #3
 80014e6:	d87b      	bhi.n	80015e0 <ST7735_SetRotation+0x124>
 80014e8:	a201      	add	r2, pc, #4	; (adr r2, 80014f0 <ST7735_SetRotation+0x34>)
 80014ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ee:	bf00      	nop
 80014f0:	08001501 	.word	0x08001501
 80014f4:	0800153d 	.word	0x0800153d
 80014f8:	08001579 	.word	0x08001579
 80014fc:	080015a5 	.word	0x080015a5
  {
    case 0:
    {
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[1] | _data_rotation[3]);
 8001500:	4b3d      	ldr	r3, [pc, #244]	; (80015f8 <ST7735_SetRotation+0x13c>)
 8001502:	781a      	ldrb	r2, [r3, #0]
 8001504:	4b3c      	ldr	r3, [pc, #240]	; (80015f8 <ST7735_SetRotation+0x13c>)
 8001506:	785b      	ldrb	r3, [r3, #1]
 8001508:	4313      	orrs	r3, r2
 800150a:	b2da      	uxtb	r2, r3
 800150c:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <ST7735_SetRotation+0x13c>)
 800150e:	78db      	ldrb	r3, [r3, #3]
 8001510:	4313      	orrs	r3, r2
 8001512:	b2db      	uxtb	r3, r3
 8001514:	73fb      	strb	r3, [r7, #15]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8001516:	f107 030f 	add.w	r3, r7, #15
 800151a:	2101      	movs	r1, #1
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f967 	bl	80007f0 <ST7735_WriteData>
        _width  = ST7735_WIDTH;
 8001522:	4b36      	ldr	r3, [pc, #216]	; (80015fc <ST7735_SetRotation+0x140>)
 8001524:	2280      	movs	r2, #128	; 0x80
 8001526:	801a      	strh	r2, [r3, #0]
        _height = ST7735_HEIGHT;
 8001528:	4b35      	ldr	r3, [pc, #212]	; (8001600 <ST7735_SetRotation+0x144>)
 800152a:	2280      	movs	r2, #128	; 0x80
 800152c:	801a      	strh	r2, [r3, #0]
        _xstart = ST7735_XSTART;
 800152e:	4b35      	ldr	r3, [pc, #212]	; (8001604 <ST7735_SetRotation+0x148>)
 8001530:	2202      	movs	r2, #2
 8001532:	701a      	strb	r2, [r3, #0]
		_ystart = ST7735_YSTART;
 8001534:	4b34      	ldr	r3, [pc, #208]	; (8001608 <ST7735_SetRotation+0x14c>)
 8001536:	2203      	movs	r2, #3
 8001538:	701a      	strb	r2, [r3, #0]
    }
     break;
 800153a:	e051      	b.n	80015e0 <ST7735_SetRotation+0x124>
    case 1:
    {
    	uint8_t d_r = (_data_rotation[1] | _data_rotation[2] | _data_rotation[3]);
 800153c:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <ST7735_SetRotation+0x13c>)
 800153e:	785a      	ldrb	r2, [r3, #1]
 8001540:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <ST7735_SetRotation+0x13c>)
 8001542:	789b      	ldrb	r3, [r3, #2]
 8001544:	4313      	orrs	r3, r2
 8001546:	b2da      	uxtb	r2, r3
 8001548:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <ST7735_SetRotation+0x13c>)
 800154a:	78db      	ldrb	r3, [r3, #3]
 800154c:	4313      	orrs	r3, r2
 800154e:	b2db      	uxtb	r3, r3
 8001550:	73bb      	strb	r3, [r7, #14]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8001552:	f107 030e 	add.w	r3, r7, #14
 8001556:	2101      	movs	r1, #1
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff f949 	bl	80007f0 <ST7735_WriteData>
    	_width  = ST7735_HEIGHT;
 800155e:	4b27      	ldr	r3, [pc, #156]	; (80015fc <ST7735_SetRotation+0x140>)
 8001560:	2280      	movs	r2, #128	; 0x80
 8001562:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_WIDTH;
 8001564:	4b26      	ldr	r3, [pc, #152]	; (8001600 <ST7735_SetRotation+0x144>)
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_YSTART;
 800156a:	4b26      	ldr	r3, [pc, #152]	; (8001604 <ST7735_SetRotation+0x148>)
 800156c:	2203      	movs	r2, #3
 800156e:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_XSTART;
 8001570:	4b25      	ldr	r3, [pc, #148]	; (8001608 <ST7735_SetRotation+0x14c>)
 8001572:	2202      	movs	r2, #2
 8001574:	701a      	strb	r2, [r3, #0]
    }
      break;
 8001576:	e033      	b.n	80015e0 <ST7735_SetRotation+0x124>
    case 2:
    {
    	uint8_t d_r = _data_rotation[3];
 8001578:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <ST7735_SetRotation+0x13c>)
 800157a:	78db      	ldrb	r3, [r3, #3]
 800157c:	737b      	strb	r3, [r7, #13]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 800157e:	f107 030d 	add.w	r3, r7, #13
 8001582:	2101      	movs	r1, #1
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff f933 	bl	80007f0 <ST7735_WriteData>
    	_width  = ST7735_WIDTH;
 800158a:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <ST7735_SetRotation+0x140>)
 800158c:	2280      	movs	r2, #128	; 0x80
 800158e:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_HEIGHT;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <ST7735_SetRotation+0x144>)
 8001592:	2280      	movs	r2, #128	; 0x80
 8001594:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_XSTART;
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <ST7735_SetRotation+0x148>)
 8001598:	2202      	movs	r2, #2
 800159a:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_YSTART;
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <ST7735_SetRotation+0x14c>)
 800159e:	2203      	movs	r2, #3
 80015a0:	701a      	strb	r2, [r3, #0]
    }
      break;
 80015a2:	e01d      	b.n	80015e0 <ST7735_SetRotation+0x124>
    case 3:
    {
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[2] | _data_rotation[3]);
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <ST7735_SetRotation+0x13c>)
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <ST7735_SetRotation+0x13c>)
 80015aa:	789b      	ldrb	r3, [r3, #2]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <ST7735_SetRotation+0x13c>)
 80015b2:	78db      	ldrb	r3, [r3, #3]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	733b      	strb	r3, [r7, #12]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	2101      	movs	r1, #1
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff f915 	bl	80007f0 <ST7735_WriteData>
    	_width  = ST7735_HEIGHT;
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <ST7735_SetRotation+0x140>)
 80015c8:	2280      	movs	r2, #128	; 0x80
 80015ca:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_WIDTH;
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <ST7735_SetRotation+0x144>)
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_YSTART;
 80015d2:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <ST7735_SetRotation+0x148>)
 80015d4:	2203      	movs	r2, #3
 80015d6:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_XSTART;
 80015d8:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <ST7735_SetRotation+0x14c>)
 80015da:	2202      	movs	r2, #2
 80015dc:	701a      	strb	r2, [r3, #0]
    }
      break;
 80015de:	bf00      	nop
  }
  TFT_CS_H();
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <ST7735_SetRotation+0x138>)
 80015e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015e6:	611a      	str	r2, [r3, #16]
}
 80015e8:	bf00      	nop
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	2000004d 	.word	0x2000004d
 80015f4:	40010c00 	.word	0x40010c00
 80015f8:	20000018 	.word	0x20000018
 80015fc:	2000001e 	.word	0x2000001e
 8001600:	2000001c 	.word	0x2000001c
 8001604:	20000020 	.word	0x20000020
 8001608:	20000021 	.word	0x20000021

0800160c <ST7735_GetHeight>:
{
  return _value_rotation;
}

int16_t ST7735_GetHeight(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
	return _height;
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <ST7735_GetHeight+0x14>)
 8001612:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	2000001c 	.word	0x2000001c

08001624 <ST7735_GetWidth>:

int16_t ST7735_GetWidth(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
	return _width;
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <ST7735_GetWidth+0x14>)
 800162a:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800162e:	4618      	mov	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	2000001e 	.word	0x2000001e

0800163c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_MspInit+0x5c>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	4a14      	ldr	r2, [pc, #80]	; (8001698 <HAL_MspInit+0x5c>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6193      	str	r3, [r2, #24]
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_MspInit+0x5c>)
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_MspInit+0x5c>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <HAL_MspInit+0x5c>)
 8001660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001664:	61d3      	str	r3, [r2, #28]
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <HAL_MspInit+0x5c>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_MspInit+0x60>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	4a04      	ldr	r2, [pc, #16]	; (800169c <HAL_MspInit+0x60>)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	40021000 	.word	0x40021000
 800169c:	40010000 	.word	0x40010000

080016a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0310 	add.w	r3, r7, #16
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a15      	ldr	r2, [pc, #84]	; (8001710 <HAL_SPI_MspInit+0x70>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d123      	bne.n	8001708 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016c0:	4b14      	ldr	r3, [pc, #80]	; (8001714 <HAL_SPI_MspInit+0x74>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	4a13      	ldr	r2, [pc, #76]	; (8001714 <HAL_SPI_MspInit+0x74>)
 80016c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016ca:	6193      	str	r3, [r2, #24]
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <HAL_SPI_MspInit+0x74>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d8:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <HAL_SPI_MspInit+0x74>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a0d      	ldr	r2, [pc, #52]	; (8001714 <HAL_SPI_MspInit+0x74>)
 80016de:	f043 0304 	orr.w	r3, r3, #4
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_SPI_MspInit+0x74>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80016f0:	23a0      	movs	r3, #160	; 0xa0
 80016f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f4:	2302      	movs	r3, #2
 80016f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f8:	2303      	movs	r3, #3
 80016fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fc:	f107 0310 	add.w	r3, r7, #16
 8001700:	4619      	mov	r1, r3
 8001702:	4805      	ldr	r0, [pc, #20]	; (8001718 <HAL_SPI_MspInit+0x78>)
 8001704:	f000 fa20 	bl	8001b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001708:	bf00      	nop
 800170a:	3720      	adds	r7, #32
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40013000 	.word	0x40013000
 8001714:	40021000 	.word	0x40021000
 8001718:	40010800 	.word	0x40010800

0800171c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172c:	e7fe      	b.n	800172c <HardFault_Handler+0x4>

0800172e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001732:	e7fe      	b.n	8001732 <MemManage_Handler+0x4>

08001734 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <BusFault_Handler+0x4>

0800173a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <UsageFault_Handler+0x4>

08001740 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001768:	f000 f8a2 	bl	80018b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001774:	4b15      	ldr	r3, [pc, #84]	; (80017cc <SystemInit+0x5c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a14      	ldr	r2, [pc, #80]	; (80017cc <SystemInit+0x5c>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <SystemInit+0x5c>)
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	4911      	ldr	r1, [pc, #68]	; (80017cc <SystemInit+0x5c>)
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <SystemInit+0x60>)
 8001788:	4013      	ands	r3, r2
 800178a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <SystemInit+0x5c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <SystemInit+0x5c>)
 8001792:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800179a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <SystemInit+0x5c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <SystemInit+0x5c>)
 80017a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <SystemInit+0x5c>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	4a07      	ldr	r2, [pc, #28]	; (80017cc <SystemInit+0x5c>)
 80017ae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80017b2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <SystemInit+0x5c>)
 80017b6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80017ba:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <SystemInit+0x64>)
 80017be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017c2:	609a      	str	r2, [r3, #8]
#endif 
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	40021000 	.word	0x40021000
 80017d0:	f8ff0000 	.word	0xf8ff0000
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80017d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80017da:	e003      	b.n	80017e4 <LoopCopyDataInit>

080017dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80017de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80017e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80017e2:	3104      	adds	r1, #4

080017e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80017e4:	480a      	ldr	r0, [pc, #40]	; (8001810 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80017e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80017ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80017ec:	d3f6      	bcc.n	80017dc <CopyDataInit>
  ldr r2, =_sbss
 80017ee:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80017f0:	e002      	b.n	80017f8 <LoopFillZerobss>

080017f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80017f4:	f842 3b04 	str.w	r3, [r2], #4

080017f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80017fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80017fc:	d3f9      	bcc.n	80017f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017fe:	f7ff ffb7 	bl	8001770 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001802:	f001 f91b 	bl	8002a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001806:	f7fe febd 	bl	8000584 <main>
  bx lr
 800180a:	4770      	bx	lr
  ldr r3, =_sidata
 800180c:	0800d400 	.word	0x0800d400
  ldr r0, =_sdata
 8001810:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001814:	20000030 	.word	0x20000030
  ldr r2, =_sbss
 8001818:	20000030 	.word	0x20000030
  ldr r3, = _ebss
 800181c:	200000f0 	.word	0x200000f0

08001820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001820:	e7fe      	b.n	8001820 <ADC1_2_IRQHandler>
	...

08001824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <HAL_Init+0x28>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a07      	ldr	r2, [pc, #28]	; (800184c <HAL_Init+0x28>)
 800182e:	f043 0310 	orr.w	r3, r3, #16
 8001832:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001834:	2003      	movs	r0, #3
 8001836:	f000 f945 	bl	8001ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183a:	2000      	movs	r0, #0
 800183c:	f000 f808 	bl	8001850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001840:	f7ff fefc 	bl	800163c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40022000 	.word	0x40022000

08001850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_InitTick+0x54>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_InitTick+0x58>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	4619      	mov	r1, r3
 8001862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001866:	fbb3 f3f1 	udiv	r3, r3, r1
 800186a:	fbb2 f3f3 	udiv	r3, r2, r3
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f95d 	bl	8001b2e <HAL_SYSTICK_Config>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e00e      	b.n	800189c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b0f      	cmp	r3, #15
 8001882:	d80a      	bhi.n	800189a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001884:	2200      	movs	r2, #0
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f000 f925 	bl	8001ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001890:	4a06      	ldr	r2, [pc, #24]	; (80018ac <HAL_InitTick+0x5c>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	e000      	b.n	800189c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000024 	.word	0x20000024
 80018a8:	2000002c 	.word	0x2000002c
 80018ac:	20000028 	.word	0x20000028

080018b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_IncTick+0x1c>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_IncTick+0x20>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	4a03      	ldr	r2, [pc, #12]	; (80018d0 <HAL_IncTick+0x20>)
 80018c2:	6013      	str	r3, [r2, #0]
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	2000002c 	.word	0x2000002c
 80018d0:	200000ec 	.word	0x200000ec

080018d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return uwTick;
 80018d8:	4b02      	ldr	r3, [pc, #8]	; (80018e4 <HAL_GetTick+0x10>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	200000ec 	.word	0x200000ec

080018e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f0:	f7ff fff0 	bl	80018d4 <HAL_GetTick>
 80018f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001900:	d005      	beq.n	800190e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_Delay+0x40>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190e:	bf00      	nop
 8001910:	f7ff ffe0 	bl	80018d4 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	429a      	cmp	r2, r3
 800191e:	d8f7      	bhi.n	8001910 <HAL_Delay+0x28>
  {
  }
}
 8001920:	bf00      	nop
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	2000002c 	.word	0x2000002c

0800192c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001948:	4013      	ands	r3, r2
 800194a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800195c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195e:	4a04      	ldr	r2, [pc, #16]	; (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	60d3      	str	r3, [r2, #12]
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <__NVIC_GetPriorityGrouping+0x18>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	f003 0307 	and.w	r3, r3, #7
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	db0b      	blt.n	80019ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	f003 021f 	and.w	r2, r3, #31
 80019a8:	4906      	ldr	r1, [pc, #24]	; (80019c4 <__NVIC_EnableIRQ+0x34>)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	095b      	lsrs	r3, r3, #5
 80019b0:	2001      	movs	r0, #1
 80019b2:	fa00 f202 	lsl.w	r2, r0, r2
 80019b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	e000e100 	.word	0xe000e100

080019c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	db0a      	blt.n	80019f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	490c      	ldr	r1, [pc, #48]	; (8001a14 <__NVIC_SetPriority+0x4c>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	0112      	lsls	r2, r2, #4
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	440b      	add	r3, r1
 80019ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f0:	e00a      	b.n	8001a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4908      	ldr	r1, [pc, #32]	; (8001a18 <__NVIC_SetPriority+0x50>)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	3b04      	subs	r3, #4
 8001a00:	0112      	lsls	r2, r2, #4
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	440b      	add	r3, r1
 8001a06:	761a      	strb	r2, [r3, #24]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000e100 	.word	0xe000e100
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f1c3 0307 	rsb	r3, r3, #7
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	bf28      	it	cs
 8001a3a:	2304      	movcs	r3, #4
 8001a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3304      	adds	r3, #4
 8001a42:	2b06      	cmp	r3, #6
 8001a44:	d902      	bls.n	8001a4c <NVIC_EncodePriority+0x30>
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3b03      	subs	r3, #3
 8001a4a:	e000      	b.n	8001a4e <NVIC_EncodePriority+0x32>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	f04f 32ff 	mov.w	r2, #4294967295
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43da      	mvns	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	401a      	ands	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	43d9      	mvns	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	4313      	orrs	r3, r2
         );
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3724      	adds	r7, #36	; 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a90:	d301      	bcc.n	8001a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a92:	2301      	movs	r3, #1
 8001a94:	e00f      	b.n	8001ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a96:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <SysTick_Config+0x40>)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9e:	210f      	movs	r1, #15
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	f7ff ff90 	bl	80019c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <SysTick_Config+0x40>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <SysTick_Config+0x40>)
 8001ab0:	2207      	movs	r2, #7
 8001ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	e000e010 	.word	0xe000e010

08001ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ff2d 	bl	800192c <__NVIC_SetPriorityGrouping>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
 8001ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aec:	f7ff ff42 	bl	8001974 <__NVIC_GetPriorityGrouping>
 8001af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	6978      	ldr	r0, [r7, #20]
 8001af8:	f7ff ff90 	bl	8001a1c <NVIC_EncodePriority>
 8001afc:	4602      	mov	r2, r0
 8001afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b02:	4611      	mov	r1, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff5f 	bl	80019c8 <__NVIC_SetPriority>
}
 8001b0a:	bf00      	nop
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	4603      	mov	r3, r0
 8001b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff35 	bl	8001990 <__NVIC_EnableIRQ>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff ffa2 	bl	8001a80 <SysTick_Config>
 8001b3c:	4603      	mov	r3, r0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b08b      	sub	sp, #44	; 0x2c
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b56:	2300      	movs	r3, #0
 8001b58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b5a:	e127      	b.n	8001dac <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	69fa      	ldr	r2, [r7, #28]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	f040 8116 	bne.w	8001da6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b12      	cmp	r3, #18
 8001b80:	d034      	beq.n	8001bec <HAL_GPIO_Init+0xa4>
 8001b82:	2b12      	cmp	r3, #18
 8001b84:	d80d      	bhi.n	8001ba2 <HAL_GPIO_Init+0x5a>
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d02b      	beq.n	8001be2 <HAL_GPIO_Init+0x9a>
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d804      	bhi.n	8001b98 <HAL_GPIO_Init+0x50>
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d031      	beq.n	8001bf6 <HAL_GPIO_Init+0xae>
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d01c      	beq.n	8001bd0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b96:	e048      	b.n	8001c2a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d043      	beq.n	8001c24 <HAL_GPIO_Init+0xdc>
 8001b9c:	2b11      	cmp	r3, #17
 8001b9e:	d01b      	beq.n	8001bd8 <HAL_GPIO_Init+0x90>
          break;
 8001ba0:	e043      	b.n	8001c2a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ba2:	4a89      	ldr	r2, [pc, #548]	; (8001dc8 <HAL_GPIO_Init+0x280>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d026      	beq.n	8001bf6 <HAL_GPIO_Init+0xae>
 8001ba8:	4a87      	ldr	r2, [pc, #540]	; (8001dc8 <HAL_GPIO_Init+0x280>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d806      	bhi.n	8001bbc <HAL_GPIO_Init+0x74>
 8001bae:	4a87      	ldr	r2, [pc, #540]	; (8001dcc <HAL_GPIO_Init+0x284>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d020      	beq.n	8001bf6 <HAL_GPIO_Init+0xae>
 8001bb4:	4a86      	ldr	r2, [pc, #536]	; (8001dd0 <HAL_GPIO_Init+0x288>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d01d      	beq.n	8001bf6 <HAL_GPIO_Init+0xae>
          break;
 8001bba:	e036      	b.n	8001c2a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001bbc:	4a85      	ldr	r2, [pc, #532]	; (8001dd4 <HAL_GPIO_Init+0x28c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d019      	beq.n	8001bf6 <HAL_GPIO_Init+0xae>
 8001bc2:	4a85      	ldr	r2, [pc, #532]	; (8001dd8 <HAL_GPIO_Init+0x290>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d016      	beq.n	8001bf6 <HAL_GPIO_Init+0xae>
 8001bc8:	4a84      	ldr	r2, [pc, #528]	; (8001ddc <HAL_GPIO_Init+0x294>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d013      	beq.n	8001bf6 <HAL_GPIO_Init+0xae>
          break;
 8001bce:	e02c      	b.n	8001c2a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	623b      	str	r3, [r7, #32]
          break;
 8001bd6:	e028      	b.n	8001c2a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	623b      	str	r3, [r7, #32]
          break;
 8001be0:	e023      	b.n	8001c2a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	3308      	adds	r3, #8
 8001be8:	623b      	str	r3, [r7, #32]
          break;
 8001bea:	e01e      	b.n	8001c2a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	330c      	adds	r3, #12
 8001bf2:	623b      	str	r3, [r7, #32]
          break;
 8001bf4:	e019      	b.n	8001c2a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d102      	bne.n	8001c04 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bfe:	2304      	movs	r3, #4
 8001c00:	623b      	str	r3, [r7, #32]
          break;
 8001c02:	e012      	b.n	8001c2a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d105      	bne.n	8001c18 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c0c:	2308      	movs	r3, #8
 8001c0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69fa      	ldr	r2, [r7, #28]
 8001c14:	611a      	str	r2, [r3, #16]
          break;
 8001c16:	e008      	b.n	8001c2a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c18:	2308      	movs	r3, #8
 8001c1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	615a      	str	r2, [r3, #20]
          break;
 8001c22:	e002      	b.n	8001c2a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
          break;
 8001c28:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	2bff      	cmp	r3, #255	; 0xff
 8001c2e:	d801      	bhi.n	8001c34 <HAL_GPIO_Init+0xec>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	e001      	b.n	8001c38 <HAL_GPIO_Init+0xf0>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3304      	adds	r3, #4
 8001c38:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	2bff      	cmp	r3, #255	; 0xff
 8001c3e:	d802      	bhi.n	8001c46 <HAL_GPIO_Init+0xfe>
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	e002      	b.n	8001c4c <HAL_GPIO_Init+0x104>
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	3b08      	subs	r3, #8
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	210f      	movs	r1, #15
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	6a39      	ldr	r1, [r7, #32]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	fa01 f303 	lsl.w	r3, r1, r3
 8001c66:	431a      	orrs	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 8096 	beq.w	8001da6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c7a:	4b59      	ldr	r3, [pc, #356]	; (8001de0 <HAL_GPIO_Init+0x298>)
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	4a58      	ldr	r2, [pc, #352]	; (8001de0 <HAL_GPIO_Init+0x298>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6193      	str	r3, [r2, #24]
 8001c86:	4b56      	ldr	r3, [pc, #344]	; (8001de0 <HAL_GPIO_Init+0x298>)
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c92:	4a54      	ldr	r2, [pc, #336]	; (8001de4 <HAL_GPIO_Init+0x29c>)
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	089b      	lsrs	r3, r3, #2
 8001c98:	3302      	adds	r3, #2
 8001c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	220f      	movs	r2, #15
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4b      	ldr	r2, [pc, #300]	; (8001de8 <HAL_GPIO_Init+0x2a0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d013      	beq.n	8001ce6 <HAL_GPIO_Init+0x19e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4a      	ldr	r2, [pc, #296]	; (8001dec <HAL_GPIO_Init+0x2a4>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00d      	beq.n	8001ce2 <HAL_GPIO_Init+0x19a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a49      	ldr	r2, [pc, #292]	; (8001df0 <HAL_GPIO_Init+0x2a8>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d007      	beq.n	8001cde <HAL_GPIO_Init+0x196>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a48      	ldr	r2, [pc, #288]	; (8001df4 <HAL_GPIO_Init+0x2ac>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d101      	bne.n	8001cda <HAL_GPIO_Init+0x192>
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x1a0>
 8001cda:	2304      	movs	r3, #4
 8001cdc:	e004      	b.n	8001ce8 <HAL_GPIO_Init+0x1a0>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e002      	b.n	8001ce8 <HAL_GPIO_Init+0x1a0>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_GPIO_Init+0x1a0>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cea:	f002 0203 	and.w	r2, r2, #3
 8001cee:	0092      	lsls	r2, r2, #2
 8001cf0:	4093      	lsls	r3, r2
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cf8:	493a      	ldr	r1, [pc, #232]	; (8001de4 <HAL_GPIO_Init+0x29c>)
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	089b      	lsrs	r3, r3, #2
 8001cfe:	3302      	adds	r3, #2
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d006      	beq.n	8001d20 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d12:	4b39      	ldr	r3, [pc, #228]	; (8001df8 <HAL_GPIO_Init+0x2b0>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4938      	ldr	r1, [pc, #224]	; (8001df8 <HAL_GPIO_Init+0x2b0>)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]
 8001d1e:	e006      	b.n	8001d2e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d20:	4b35      	ldr	r3, [pc, #212]	; (8001df8 <HAL_GPIO_Init+0x2b0>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	4933      	ldr	r1, [pc, #204]	; (8001df8 <HAL_GPIO_Init+0x2b0>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d006      	beq.n	8001d48 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d3a:	4b2f      	ldr	r3, [pc, #188]	; (8001df8 <HAL_GPIO_Init+0x2b0>)
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	492e      	ldr	r1, [pc, #184]	; (8001df8 <HAL_GPIO_Init+0x2b0>)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	604b      	str	r3, [r1, #4]
 8001d46:	e006      	b.n	8001d56 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d48:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <HAL_GPIO_Init+0x2b0>)
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	4929      	ldr	r1, [pc, #164]	; (8001df8 <HAL_GPIO_Init+0x2b0>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d006      	beq.n	8001d70 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d62:	4b25      	ldr	r3, [pc, #148]	; (8001df8 <HAL_GPIO_Init+0x2b0>)
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	4924      	ldr	r1, [pc, #144]	; (8001df8 <HAL_GPIO_Init+0x2b0>)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	608b      	str	r3, [r1, #8]
 8001d6e:	e006      	b.n	8001d7e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d70:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <HAL_GPIO_Init+0x2b0>)
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	491f      	ldr	r1, [pc, #124]	; (8001df8 <HAL_GPIO_Init+0x2b0>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d006      	beq.n	8001d98 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d8a:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <HAL_GPIO_Init+0x2b0>)
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	491a      	ldr	r1, [pc, #104]	; (8001df8 <HAL_GPIO_Init+0x2b0>)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	60cb      	str	r3, [r1, #12]
 8001d96:	e006      	b.n	8001da6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d98:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <HAL_GPIO_Init+0x2b0>)
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	4915      	ldr	r1, [pc, #84]	; (8001df8 <HAL_GPIO_Init+0x2b0>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	3301      	adds	r3, #1
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	fa22 f303 	lsr.w	r3, r2, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f47f aed0 	bne.w	8001b5c <HAL_GPIO_Init+0x14>
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	372c      	adds	r7, #44	; 0x2c
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	10210000 	.word	0x10210000
 8001dcc:	10110000 	.word	0x10110000
 8001dd0:	10120000 	.word	0x10120000
 8001dd4:	10310000 	.word	0x10310000
 8001dd8:	10320000 	.word	0x10320000
 8001ddc:	10220000 	.word	0x10220000
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40010000 	.word	0x40010000
 8001de8:	40010800 	.word	0x40010800
 8001dec:	40010c00 	.word	0x40010c00
 8001df0:	40011000 	.word	0x40011000
 8001df4:	40011400 	.word	0x40011400
 8001df8:	40010400 	.word	0x40010400

08001dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	807b      	strh	r3, [r7, #2]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e0c:	787b      	ldrb	r3, [r7, #1]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e12:	887a      	ldrh	r2, [r7, #2]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e18:	e003      	b.n	8001e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e1a:	887b      	ldrh	r3, [r7, #2]
 8001e1c:	041a      	lsls	r2, r3, #16
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	611a      	str	r2, [r3, #16]
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e26c      	b.n	8002318 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8087 	beq.w	8001f5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e4c:	4b92      	ldr	r3, [pc, #584]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d00c      	beq.n	8001e72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e58:	4b8f      	ldr	r3, [pc, #572]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 030c 	and.w	r3, r3, #12
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d112      	bne.n	8001e8a <HAL_RCC_OscConfig+0x5e>
 8001e64:	4b8c      	ldr	r3, [pc, #560]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e70:	d10b      	bne.n	8001e8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e72:	4b89      	ldr	r3, [pc, #548]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d06c      	beq.n	8001f58 <HAL_RCC_OscConfig+0x12c>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d168      	bne.n	8001f58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e246      	b.n	8002318 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e92:	d106      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x76>
 8001e94:	4b80      	ldr	r3, [pc, #512]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a7f      	ldr	r2, [pc, #508]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	e02e      	b.n	8001f00 <HAL_RCC_OscConfig+0xd4>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x98>
 8001eaa:	4b7b      	ldr	r3, [pc, #492]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a7a      	ldr	r2, [pc, #488]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	4b78      	ldr	r3, [pc, #480]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a77      	ldr	r2, [pc, #476]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e01d      	b.n	8001f00 <HAL_RCC_OscConfig+0xd4>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0xbc>
 8001ece:	4b72      	ldr	r3, [pc, #456]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a71      	ldr	r2, [pc, #452]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	4b6f      	ldr	r3, [pc, #444]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a6e      	ldr	r2, [pc, #440]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e00b      	b.n	8001f00 <HAL_RCC_OscConfig+0xd4>
 8001ee8:	4b6b      	ldr	r3, [pc, #428]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a6a      	ldr	r2, [pc, #424]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	4b68      	ldr	r3, [pc, #416]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a67      	ldr	r2, [pc, #412]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d013      	beq.n	8001f30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7ff fce4 	bl	80018d4 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f10:	f7ff fce0 	bl	80018d4 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	; 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e1fa      	b.n	8002318 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	4b5d      	ldr	r3, [pc, #372]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0xe4>
 8001f2e:	e014      	b.n	8001f5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7ff fcd0 	bl	80018d4 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f38:	f7ff fccc 	bl	80018d4 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	; 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e1e6      	b.n	8002318 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4a:	4b53      	ldr	r3, [pc, #332]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x10c>
 8001f56:	e000      	b.n	8001f5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d063      	beq.n	800202e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f66:	4b4c      	ldr	r3, [pc, #304]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00b      	beq.n	8001f8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f72:	4b49      	ldr	r3, [pc, #292]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d11c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x18c>
 8001f7e:	4b46      	ldr	r3, [pc, #280]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d116      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8a:	4b43      	ldr	r3, [pc, #268]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d005      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x176>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d001      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e1ba      	b.n	8002318 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa2:	4b3d      	ldr	r3, [pc, #244]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4939      	ldr	r1, [pc, #228]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb6:	e03a      	b.n	800202e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d020      	beq.n	8002002 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc0:	4b36      	ldr	r3, [pc, #216]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7ff fc85 	bl	80018d4 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fce:	f7ff fc81 	bl	80018d4 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e19b      	b.n	8002318 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe0:	4b2d      	ldr	r3, [pc, #180]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fec:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4927      	ldr	r1, [pc, #156]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]
 8002000:	e015      	b.n	800202e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002002:	4b26      	ldr	r3, [pc, #152]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff fc64 	bl	80018d4 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002010:	f7ff fc60 	bl	80018d4 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e17a      	b.n	8002318 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002022:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d03a      	beq.n	80020b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d019      	beq.n	8002076 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002042:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <HAL_RCC_OscConfig+0x274>)
 8002044:	2201      	movs	r2, #1
 8002046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002048:	f7ff fc44 	bl	80018d4 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002050:	f7ff fc40 	bl	80018d4 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e15a      	b.n	8002318 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002062:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800206e:	2001      	movs	r0, #1
 8002070:	f000 faa8 	bl	80025c4 <RCC_Delay>
 8002074:	e01c      	b.n	80020b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <HAL_RCC_OscConfig+0x274>)
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207c:	f7ff fc2a 	bl	80018d4 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002082:	e00f      	b.n	80020a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002084:	f7ff fc26 	bl	80018d4 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d908      	bls.n	80020a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e140      	b.n	8002318 <HAL_RCC_OscConfig+0x4ec>
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
 800209c:	42420000 	.word	0x42420000
 80020a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a4:	4b9e      	ldr	r3, [pc, #632]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1e9      	bne.n	8002084 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 80a6 	beq.w	800220a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020be:	2300      	movs	r3, #0
 80020c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c2:	4b97      	ldr	r3, [pc, #604]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10d      	bne.n	80020ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	4b94      	ldr	r3, [pc, #592]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	4a93      	ldr	r2, [pc, #588]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 80020d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d8:	61d3      	str	r3, [r2, #28]
 80020da:	4b91      	ldr	r3, [pc, #580]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e6:	2301      	movs	r3, #1
 80020e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ea:	4b8e      	ldr	r3, [pc, #568]	; (8002324 <HAL_RCC_OscConfig+0x4f8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d118      	bne.n	8002128 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f6:	4b8b      	ldr	r3, [pc, #556]	; (8002324 <HAL_RCC_OscConfig+0x4f8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a8a      	ldr	r2, [pc, #552]	; (8002324 <HAL_RCC_OscConfig+0x4f8>)
 80020fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002102:	f7ff fbe7 	bl	80018d4 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210a:	f7ff fbe3 	bl	80018d4 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b64      	cmp	r3, #100	; 0x64
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e0fd      	b.n	8002318 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211c:	4b81      	ldr	r3, [pc, #516]	; (8002324 <HAL_RCC_OscConfig+0x4f8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d106      	bne.n	800213e <HAL_RCC_OscConfig+0x312>
 8002130:	4b7b      	ldr	r3, [pc, #492]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	4a7a      	ldr	r2, [pc, #488]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6213      	str	r3, [r2, #32]
 800213c:	e02d      	b.n	800219a <HAL_RCC_OscConfig+0x36e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10c      	bne.n	8002160 <HAL_RCC_OscConfig+0x334>
 8002146:	4b76      	ldr	r3, [pc, #472]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	4a75      	ldr	r2, [pc, #468]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 800214c:	f023 0301 	bic.w	r3, r3, #1
 8002150:	6213      	str	r3, [r2, #32]
 8002152:	4b73      	ldr	r3, [pc, #460]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	4a72      	ldr	r2, [pc, #456]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 8002158:	f023 0304 	bic.w	r3, r3, #4
 800215c:	6213      	str	r3, [r2, #32]
 800215e:	e01c      	b.n	800219a <HAL_RCC_OscConfig+0x36e>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2b05      	cmp	r3, #5
 8002166:	d10c      	bne.n	8002182 <HAL_RCC_OscConfig+0x356>
 8002168:	4b6d      	ldr	r3, [pc, #436]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4a6c      	ldr	r2, [pc, #432]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 800216e:	f043 0304 	orr.w	r3, r3, #4
 8002172:	6213      	str	r3, [r2, #32]
 8002174:	4b6a      	ldr	r3, [pc, #424]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	4a69      	ldr	r2, [pc, #420]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	6213      	str	r3, [r2, #32]
 8002180:	e00b      	b.n	800219a <HAL_RCC_OscConfig+0x36e>
 8002182:	4b67      	ldr	r3, [pc, #412]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	4a66      	ldr	r2, [pc, #408]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 8002188:	f023 0301 	bic.w	r3, r3, #1
 800218c:	6213      	str	r3, [r2, #32]
 800218e:	4b64      	ldr	r3, [pc, #400]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4a63      	ldr	r2, [pc, #396]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 8002194:	f023 0304 	bic.w	r3, r3, #4
 8002198:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d015      	beq.n	80021ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a2:	f7ff fb97 	bl	80018d4 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a8:	e00a      	b.n	80021c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021aa:	f7ff fb93 	bl	80018d4 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e0ab      	b.n	8002318 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c0:	4b57      	ldr	r3, [pc, #348]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0ee      	beq.n	80021aa <HAL_RCC_OscConfig+0x37e>
 80021cc:	e014      	b.n	80021f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ce:	f7ff fb81 	bl	80018d4 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d4:	e00a      	b.n	80021ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7ff fb7d 	bl	80018d4 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e095      	b.n	8002318 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ec:	4b4c      	ldr	r3, [pc, #304]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1ee      	bne.n	80021d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021f8:	7dfb      	ldrb	r3, [r7, #23]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d105      	bne.n	800220a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fe:	4b48      	ldr	r3, [pc, #288]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	4a47      	ldr	r2, [pc, #284]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 8002204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002208:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 8081 	beq.w	8002316 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002214:	4b42      	ldr	r3, [pc, #264]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	2b08      	cmp	r3, #8
 800221e:	d061      	beq.n	80022e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	2b02      	cmp	r3, #2
 8002226:	d146      	bne.n	80022b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002228:	4b3f      	ldr	r3, [pc, #252]	; (8002328 <HAL_RCC_OscConfig+0x4fc>)
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222e:	f7ff fb51 	bl	80018d4 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002236:	f7ff fb4d 	bl	80018d4 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e067      	b.n	8002318 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002248:	4b35      	ldr	r3, [pc, #212]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f0      	bne.n	8002236 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800225c:	d108      	bne.n	8002270 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800225e:	4b30      	ldr	r3, [pc, #192]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	492d      	ldr	r1, [pc, #180]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002270:	4b2b      	ldr	r3, [pc, #172]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a19      	ldr	r1, [r3, #32]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	430b      	orrs	r3, r1
 8002282:	4927      	ldr	r1, [pc, #156]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 8002284:	4313      	orrs	r3, r2
 8002286:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002288:	4b27      	ldr	r3, [pc, #156]	; (8002328 <HAL_RCC_OscConfig+0x4fc>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7ff fb21 	bl	80018d4 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002296:	f7ff fb1d 	bl	80018d4 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e037      	b.n	8002318 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022a8:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x46a>
 80022b4:	e02f      	b.n	8002316 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b6:	4b1c      	ldr	r3, [pc, #112]	; (8002328 <HAL_RCC_OscConfig+0x4fc>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7ff fb0a 	bl	80018d4 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c4:	f7ff fb06 	bl	80018d4 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e020      	b.n	8002318 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x498>
 80022e2:	e018      	b.n	8002316 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e013      	b.n	8002318 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCC_OscConfig+0x4f4>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	429a      	cmp	r2, r3
 8002302:	d106      	bne.n	8002312 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	429a      	cmp	r2, r3
 8002310:	d001      	beq.n	8002316 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	40007000 	.word	0x40007000
 8002328:	42420060 	.word	0x42420060

0800232c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0d0      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002340:	4b6a      	ldr	r3, [pc, #424]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d910      	bls.n	8002370 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	4b67      	ldr	r3, [pc, #412]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 0207 	bic.w	r2, r3, #7
 8002356:	4965      	ldr	r1, [pc, #404]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b63      	ldr	r3, [pc, #396]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0b8      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d020      	beq.n	80023be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002388:	4b59      	ldr	r3, [pc, #356]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	4a58      	ldr	r2, [pc, #352]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002392:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0308 	and.w	r3, r3, #8
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023a0:	4b53      	ldr	r3, [pc, #332]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	4a52      	ldr	r2, [pc, #328]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ac:	4b50      	ldr	r3, [pc, #320]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	494d      	ldr	r1, [pc, #308]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d040      	beq.n	800244c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d107      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d2:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d115      	bne.n	800240a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e07f      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d107      	bne.n	80023fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ea:	4b41      	ldr	r3, [pc, #260]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d109      	bne.n	800240a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e073      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fa:	4b3d      	ldr	r3, [pc, #244]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e06b      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800240a:	4b39      	ldr	r3, [pc, #228]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f023 0203 	bic.w	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	4936      	ldr	r1, [pc, #216]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002418:	4313      	orrs	r3, r2
 800241a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800241c:	f7ff fa5a 	bl	80018d4 <HAL_GetTick>
 8002420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002422:	e00a      	b.n	800243a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002424:	f7ff fa56 	bl	80018d4 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e053      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243a:	4b2d      	ldr	r3, [pc, #180]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 020c 	and.w	r2, r3, #12
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	429a      	cmp	r2, r3
 800244a:	d1eb      	bne.n	8002424 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800244c:	4b27      	ldr	r3, [pc, #156]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d210      	bcs.n	800247c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245a:	4b24      	ldr	r3, [pc, #144]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 0207 	bic.w	r2, r3, #7
 8002462:	4922      	ldr	r1, [pc, #136]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	4313      	orrs	r3, r2
 8002468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800246a:	4b20      	ldr	r3, [pc, #128]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e032      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002488:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4916      	ldr	r1, [pc, #88]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	4313      	orrs	r3, r2
 8002498:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d009      	beq.n	80024ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024a6:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	490e      	ldr	r1, [pc, #56]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ba:	f000 f821 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80024be:	4601      	mov	r1, r0
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	091b      	lsrs	r3, r3, #4
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	4a0a      	ldr	r2, [pc, #40]	; (80024f4 <HAL_RCC_ClockConfig+0x1c8>)
 80024cc:	5cd3      	ldrb	r3, [r2, r3]
 80024ce:	fa21 f303 	lsr.w	r3, r1, r3
 80024d2:	4a09      	ldr	r2, [pc, #36]	; (80024f8 <HAL_RCC_ClockConfig+0x1cc>)
 80024d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_RCC_ClockConfig+0x1d0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff f9b8 	bl	8001850 <HAL_InitTick>

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40022000 	.word	0x40022000
 80024f0:	40021000 	.word	0x40021000
 80024f4:	0800d3e8 	.word	0x0800d3e8
 80024f8:	20000024 	.word	0x20000024
 80024fc:	20000028 	.word	0x20000028

08002500 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002500:	b490      	push	{r4, r7}
 8002502:	b08a      	sub	sp, #40	; 0x28
 8002504:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002506:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002508:	1d3c      	adds	r4, r7, #4
 800250a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800250c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002510:	4b28      	ldr	r3, [pc, #160]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
 800251a:	2300      	movs	r3, #0
 800251c:	61bb      	str	r3, [r7, #24]
 800251e:	2300      	movs	r3, #0
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800252a:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b04      	cmp	r3, #4
 8002538:	d002      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x40>
 800253a:	2b08      	cmp	r3, #8
 800253c:	d003      	beq.n	8002546 <HAL_RCC_GetSysClockFreq+0x46>
 800253e:	e02d      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002540:	4b1e      	ldr	r3, [pc, #120]	; (80025bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002542:	623b      	str	r3, [r7, #32]
      break;
 8002544:	e02d      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	0c9b      	lsrs	r3, r3, #18
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002552:	4413      	add	r3, r2
 8002554:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002558:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d013      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002564:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	0c5b      	lsrs	r3, r3, #17
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002572:	4413      	add	r3, r2
 8002574:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002578:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	4a0f      	ldr	r2, [pc, #60]	; (80025bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800257e:	fb02 f203 	mul.w	r2, r2, r3
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	fbb2 f3f3 	udiv	r3, r2, r3
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
 800258a:	e004      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	4a0c      	ldr	r2, [pc, #48]	; (80025c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002590:	fb02 f303 	mul.w	r3, r2, r3
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	623b      	str	r3, [r7, #32]
      break;
 800259a:	e002      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800259c:	4b07      	ldr	r3, [pc, #28]	; (80025bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800259e:	623b      	str	r3, [r7, #32]
      break;
 80025a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025a2:	6a3b      	ldr	r3, [r7, #32]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3728      	adds	r7, #40	; 0x28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc90      	pop	{r4, r7}
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	08002b48 	.word	0x08002b48
 80025b4:	08002b58 	.word	0x08002b58
 80025b8:	40021000 	.word	0x40021000
 80025bc:	007a1200 	.word	0x007a1200
 80025c0:	003d0900 	.word	0x003d0900

080025c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <RCC_Delay+0x34>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <RCC_Delay+0x38>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	0a5b      	lsrs	r3, r3, #9
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	fb02 f303 	mul.w	r3, r2, r3
 80025de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025e0:	bf00      	nop
  }
  while (Delay --);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1e5a      	subs	r2, r3, #1
 80025e6:	60fa      	str	r2, [r7, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1f9      	bne.n	80025e0 <RCC_Delay+0x1c>
}
 80025ec:	bf00      	nop
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	20000024 	.word	0x20000024
 80025fc:	10624dd3 	.word	0x10624dd3

08002600 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e053      	b.n	80026ba <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d106      	bne.n	8002632 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff f837 	bl	80016a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2202      	movs	r2, #2
 8002636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002648:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	431a      	orrs	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	ea42 0103 	orr.w	r1, r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	0c1a      	lsrs	r2, r3, #16
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f002 0204 	and.w	r2, r2, #4
 8002698:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	69da      	ldr	r2, [r3, #28]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b088      	sub	sp, #32
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	60f8      	str	r0, [r7, #12]
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	4613      	mov	r3, r2
 80026d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_SPI_Transmit+0x22>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e11e      	b.n	8002922 <HAL_SPI_Transmit+0x260>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026ec:	f7ff f8f2 	bl	80018d4 <HAL_GetTick>
 80026f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d002      	beq.n	8002708 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002702:	2302      	movs	r3, #2
 8002704:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002706:	e103      	b.n	8002910 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <HAL_SPI_Transmit+0x52>
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002718:	e0fa      	b.n	8002910 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2203      	movs	r2, #3
 800271e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	88fa      	ldrh	r2, [r7, #6]
 8002732:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	88fa      	ldrh	r2, [r7, #6]
 8002738:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002760:	d107      	bne.n	8002772 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002770:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277c:	2b40      	cmp	r3, #64	; 0x40
 800277e:	d007      	beq.n	8002790 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800278e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002798:	d14b      	bne.n	8002832 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <HAL_SPI_Transmit+0xe6>
 80027a2:	8afb      	ldrh	r3, [r7, #22]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d13e      	bne.n	8002826 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	881a      	ldrh	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	1c9a      	adds	r2, r3, #2
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027cc:	e02b      	b.n	8002826 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d112      	bne.n	8002802 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	881a      	ldrh	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	1c9a      	adds	r2, r3, #2
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8002800:	e011      	b.n	8002826 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002802:	f7ff f867 	bl	80018d4 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d803      	bhi.n	800281a <HAL_SPI_Transmit+0x158>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002818:	d102      	bne.n	8002820 <HAL_SPI_Transmit+0x15e>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d102      	bne.n	8002826 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002824:	e074      	b.n	8002910 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1ce      	bne.n	80027ce <HAL_SPI_Transmit+0x10c>
 8002830:	e04c      	b.n	80028cc <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_SPI_Transmit+0x17e>
 800283a:	8afb      	ldrh	r3, [r7, #22]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d140      	bne.n	80028c2 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	330c      	adds	r3, #12
 800284a:	7812      	ldrb	r2, [r2, #0]
 800284c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002866:	e02c      	b.n	80028c2 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b02      	cmp	r3, #2
 8002874:	d113      	bne.n	800289e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	330c      	adds	r3, #12
 8002880:	7812      	ldrb	r2, [r2, #0]
 8002882:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002892:	b29b      	uxth	r3, r3
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	86da      	strh	r2, [r3, #54]	; 0x36
 800289c:	e011      	b.n	80028c2 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800289e:	f7ff f819 	bl	80018d4 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d803      	bhi.n	80028b6 <HAL_SPI_Transmit+0x1f4>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d102      	bne.n	80028bc <HAL_SPI_Transmit+0x1fa>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d102      	bne.n	80028c2 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028c0:	e026      	b.n	8002910 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1cd      	bne.n	8002868 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	6839      	ldr	r1, [r7, #0]
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f894 	bl	80029fe <SPI_EndRxTxTransaction>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10a      	bne.n	8002900 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	77fb      	strb	r3, [r7, #31]
 800290c:	e000      	b.n	8002910 <HAL_SPI_Transmit+0x24e>
  }

error:
 800290e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002920:	7ffb      	ldrb	r3, [r7, #31]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3720      	adds	r7, #32
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b084      	sub	sp, #16
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	603b      	str	r3, [r7, #0]
 8002936:	4613      	mov	r3, r2
 8002938:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800293a:	e04c      	b.n	80029d6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002942:	d048      	beq.n	80029d6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002944:	f7fe ffc6 	bl	80018d4 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d902      	bls.n	800295a <SPI_WaitFlagStateUntilTimeout+0x30>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d13d      	bne.n	80029d6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002968:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002972:	d111      	bne.n	8002998 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800297c:	d004      	beq.n	8002988 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002986:	d107      	bne.n	8002998 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002996:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029a0:	d10f      	bne.n	80029c2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e00f      	b.n	80029f6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	4013      	ands	r3, r2
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	bf0c      	ite	eq
 80029e6:	2301      	moveq	r3, #1
 80029e8:	2300      	movne	r3, #0
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d1a3      	bne.n	800293c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b086      	sub	sp, #24
 8002a02:	af02      	add	r7, sp, #8
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2200      	movs	r2, #0
 8002a12:	2180      	movs	r1, #128	; 0x80
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f7ff ff88 	bl	800292a <SPI_WaitFlagStateUntilTimeout>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d007      	beq.n	8002a30 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a24:	f043 0220 	orr.w	r2, r3, #32
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e000      	b.n	8002a32 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <__libc_init_array>:
 8002a3c:	b570      	push	{r4, r5, r6, lr}
 8002a3e:	2500      	movs	r5, #0
 8002a40:	4e0c      	ldr	r6, [pc, #48]	; (8002a74 <__libc_init_array+0x38>)
 8002a42:	4c0d      	ldr	r4, [pc, #52]	; (8002a78 <__libc_init_array+0x3c>)
 8002a44:	1ba4      	subs	r4, r4, r6
 8002a46:	10a4      	asrs	r4, r4, #2
 8002a48:	42a5      	cmp	r5, r4
 8002a4a:	d109      	bne.n	8002a60 <__libc_init_array+0x24>
 8002a4c:	f000 f822 	bl	8002a94 <_init>
 8002a50:	2500      	movs	r5, #0
 8002a52:	4e0a      	ldr	r6, [pc, #40]	; (8002a7c <__libc_init_array+0x40>)
 8002a54:	4c0a      	ldr	r4, [pc, #40]	; (8002a80 <__libc_init_array+0x44>)
 8002a56:	1ba4      	subs	r4, r4, r6
 8002a58:	10a4      	asrs	r4, r4, #2
 8002a5a:	42a5      	cmp	r5, r4
 8002a5c:	d105      	bne.n	8002a6a <__libc_init_array+0x2e>
 8002a5e:	bd70      	pop	{r4, r5, r6, pc}
 8002a60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a64:	4798      	blx	r3
 8002a66:	3501      	adds	r5, #1
 8002a68:	e7ee      	b.n	8002a48 <__libc_init_array+0xc>
 8002a6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a6e:	4798      	blx	r3
 8002a70:	3501      	adds	r5, #1
 8002a72:	e7f2      	b.n	8002a5a <__libc_init_array+0x1e>
 8002a74:	0800d3f8 	.word	0x0800d3f8
 8002a78:	0800d3f8 	.word	0x0800d3f8
 8002a7c:	0800d3f8 	.word	0x0800d3f8
 8002a80:	0800d3fc 	.word	0x0800d3fc

08002a84 <memset>:
 8002a84:	4603      	mov	r3, r0
 8002a86:	4402      	add	r2, r0
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d100      	bne.n	8002a8e <memset+0xa>
 8002a8c:	4770      	bx	lr
 8002a8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a92:	e7f9      	b.n	8002a88 <memset+0x4>

08002a94 <_init>:
 8002a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a96:	bf00      	nop
 8002a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a9a:	bc08      	pop	{r3}
 8002a9c:	469e      	mov	lr, r3
 8002a9e:	4770      	bx	lr

08002aa0 <_fini>:
 8002aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa2:	bf00      	nop
 8002aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa6:	bc08      	pop	{r3}
 8002aa8:	469e      	mov	lr, r3
 8002aaa:	4770      	bx	lr
